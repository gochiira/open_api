openapi: 3.0.0
info:
  title: UsagiBooru Wiki API
  version: '2.0'
  contact:
    name: Omado
    url: 'https://twitter.com/shallow_omado'
    email: dsgamer777@gmail.com
  description: |-
    Wiki関連API
    (Optional)
  license:
    name: GPLv3
    url: 'https://www.gnu.org/licenses/gpl-3.0.ja.html'
servers:
  - url: 'https://api.gochiusa.team'
    description: Prod
  - url: 'https://api-next.gochiusa.team'
    description: Staging
  - url: 'http://127.0.0.1:8080'
    description: Dev
paths:
  /wiki:
    post:
      summary: Add wiki article
      operationId: addWikiArticle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: Wikiの記事を作成します
      tags:
        - wiki
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiArticleStruct'
    get:
      summary: Get wiki articles
      operationId: getWikiArticles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWikiArticlesResponse'
      description: 全記事一覧を取得します
      tags:
        - wiki
      parameters:
        - $ref: '#/components/parameters/SearchQuerySortCatalog'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryPerPage'
  '/wiki/{articleID}':
    parameters:
      - schema:
          type: integer
        name: articleID
        in: path
        required: true
        description: 対象の記事ID
    get:
      summary: Get wiki article
      tags:
        - wiki
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getWikiArticle
      description: Wikiの記事を取得します
    delete:
      summary: Delete wiki article
      operationId: deleteWikiArticle
      tags:
        - wiki
      description: Wikiの記事を削除します
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
    patch:
      summary: Edit wiki article
      operationId: editWikiArticle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiArticleStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: Wikiの記事を編集します
      tags:
        - wiki
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiArticleStruct'
  /wiki/find:
    get:
      summary: Find wiki article
      tags:
        - wiki
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: findWikiArticle
      description: Wikiの記事が存在するかを確認します
      parameters:
        - schema:
            type: integer
          in: query
          name: type
          description: '対象の記事種別 0:ユーザー 1:タグ 2:絵師'
        - schema:
            type: integer
          in: query
          name: id
          description: 対象の記事ID
components:
  schemas:
    GeneralMessageResponse:
      title: GeneralMessageResponse
      type: object
      properties:
        message:
          type: string
          description: 応答メッセージ(何が間違っているかの詳細)
          minLength: 1
      required:
        - message
      x-examples:
        not-found:
          message: Specified content was not found.
        no-permission:
          message: You don't have enough permission to do it.
        bad-request:
          message: Your request body is wrong.
        locked:
          message: Specified content is referenced from other content.
    WikiArticleStruct:
      title: WikiArticleStruct
      type: object
      x-examples:
        example:
          articleID: 1
          targetType: user
          targetID: 1
          title: お窓とは
          body: One of UsagiBooru developer. Loves kafuu chino.
          date: '2021-03-22'
          revision: 1
          author:
            accountID: 1
            name: お窓
      properties:
        articleID:
          type: integer
          description: 記事ID
          minimum: 1
          example: 1
        targetType:
          type: string
          description: 対象の記事種別
          default: user
          enum:
            - user
            - artist
            - tag
          example: user
          minLength: 1
          maxLength: 10
        targetID:
          type: integer
          description: 対象のユーザー/タグ/絵師ID
          minimum: 1
        title:
          type: string
          description: 記事タイトル
          minLength: 1
          maxLength: 50
          example: お窓とは
        body:
          type: string
          description: 記事本文
          maxLength: 3000
          minLength: 1
          example: One of UsagiBooru developer. Loves kafuu chino.
        date:
          type: string
          description: 作成日時
          format: date
          example: '2021-03-22'
        revision:
          type: integer
          description: 総編集回数
          minimum: 1
          default: 1
          example: 1
        author:
          $ref: '#/components/schemas/LightAccountStruct'
    GetWikiArticlesResponse:
      title: GetWikiArticlesResponse
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationStruct'
        articles:
          type: array
          items:
            $ref: '#/components/schemas/WikiArticleStruct'
      x-examples:
        example:
          pagination:
            title: Wiki記事一覧
            type: article
            count: 1
            current: 1
            pages: 1
            perPage: 20
          articles:
            - articleID: 1
              targetType: user
              targetID: 1
              title: お窓とは
              body: One of UsagiBooru developer. Loves kafuu chino.
              date: '2021-03-22'
              revision: 1
              author:
                accountID: 1
                name: お窓
    LightAccountStruct:
      title: LightAccountStruct
      type: object
      x-examples:
        example:
          accountID: 1
          name: お窓
      properties:
        accountID:
          type: integer
          description: アカウントID
          example: 1
          minimum: 1
        name:
          type: string
          description: アカウント名
          example: お窓
    PaginationStruct:
      title: PaginationStruct
      type: object
      x-examples:
        example:
          title: 香風智乃
          type: tag
          count: 1
          current: 1
          pages: 1
          perPage: 20
      properties:
        title:
          type: string
          minLength: 1
          description: ページネーションタイトル(表示用)
          example: 香風智乃
        type:
          type: string
          description: ページネーション種別(表示用)
          example: tag
          enum:
            - artist
            - tag
            - uploader
            - notify-client
            - notify-condition
            - mute
            - follow
            - article
            - mylist-list
            - art
            - upload-history
          default: tag
        count:
          type: integer
          example: 1
          description: ヒット総数
          minimum: 0
          default: 0
        current:
          type: integer
          description: 現在のページ
          minimum: 1
          example: 1
          default: 1
        pages:
          type: integer
          description: ページ数
          minimum: 1
          example: 1
          default: 1
        perPage:
          type: integer
          description: ページ毎の取得数
          default: 20
          example: 20
          minimum: 20
          enum:
            - 20
            - 40
            - 60
            - 80
            - 100
          maximum: 100
          format: int32
      required:
        - title
        - type
        - count
        - current
        - pages
        - perPage
  parameters:
    SearchQuerySort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        enum:
          - l
          - d
        example: d
        default: d
      description: 'ソート方法 l:いいね数順 d:投稿日順'
    SearchQueryOrder:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum:
          - d
          - a
        default: d
        example: d
        minLength: 1
        maxLength: 1
      description: 'ソート方向 d:降順(大→小) a:昇順(小→大)'
    SearchQueryPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
      description: 'ページ番号 (NOTE: 1ページ辺りの応答は20件)'
    SearchQueryPerPage:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
        default: 20
        enum:
          - 20
          - 40
          - 60
          - 80
          - 100
        example: 20
        minimum: 20
        maximum: 100
      description: 1ページ辺りの要素数
    SearchQuerySortCatalog:
      in: query
      schema:
        type: string
        default: d
        enum:
          - c
          - d
          - l
          - 'n'
        example: d
      description: 'ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前'
      name: sort
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
tags:
  - name: wiki
security:
  - Authorization: []
