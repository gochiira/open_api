openapi: 3.0.0
info:
  title: UsagiBooru Invites API
  version: '2.0'
  contact:
    name: Omado
    url: 'https://twitter.com/shallow_omado'
    email: dsgamer777@gmail.com
  description: 招待情報関連API
  license:
    name: GPLv3
    url: 'https://www.gnu.org/licenses/gpl-3.0.ja.html'
servers:
  - url: 'https://api.gochiusa.team'
    description: Prod
  - url: 'https://api-next.gochiusa.team'
    description: Staging
  - url: 'http://127.0.0.1:8080'
    description: Dev
paths:
  /invites:
    post:
      summary: Create invitation
      operationId: createInvite
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      tags:
        - invites
      description: |-
        招待コードを発行します、一般ユーザーは1人につき1コードまで作成できます。
        管理者はcode/countを指定すると任意のコードを指定数作成できます。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteStruct'
  '/invites/{inviteID}':
    parameters:
      - schema:
          type: string
        name: inviteID
        in: path
        required: true
        description: 対象の招待ID
    get:
      summary: Get invite
      tags:
        - invites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteStruct'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getInvite
      description: 指定した招待コードの情報を取得します
    delete:
      summary: Delete invite
      operationId: deleteInvite
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: 指定した招待コードを無効化します
      tags:
        - invites
components:
  schemas:
    InviteStruct:
      title: InviteStruct
      type: object
      properties:
        inviteID:
          type: integer
          example: 1
          minimum: 1
        code:
          type: string
          example: USAGIDEV
          minLength: 8
          maxLength: 16
        issuer:
          $ref: '#/components/schemas/LightAccountStruct'
        count:
          type: integer
          minimum: 1
          default: 1
          example: 1
          format: int32
      x-examples:
        example:
          inviteID: 1
          code: USAGIDEV
          issuer:
            accountID: 1
            name: お窓
          count: 1
    GeneralMessageResponse:
      title: GeneralMessageResponse
      type: object
      properties:
        message:
          type: string
          description: 応答メッセージ(何が間違っているかの詳細)
          minLength: 1
      required:
        - message
      x-examples:
        not-found:
          message: Specified content was not found.
        no-permission:
          message: You don't have enough permission to do it.
        bad-request:
          message: Your request body is wrong.
        locked:
          message: Specified content is referenced from other content.
    LightAccountStruct:
      title: LightAccountStruct
      type: object
      x-examples:
        example:
          accountID: 1
          name: お窓
      properties:
        accountID:
          type: integer
          description: アカウントID
          example: 1
          minimum: 1
        name:
          type: string
          description: アカウント名
          example: お窓
  parameters:
    SearchQuerySort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        enum:
          - l
          - d
        example: d
        default: d
      description: 'ソート方法 l:いいね数順 d:投稿日順'
    SearchQueryOrder:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum:
          - d
          - a
        default: d
        example: d
        minLength: 1
        maxLength: 1
      description: 'ソート方向 d:降順(大→小) a:昇順(小→大)'
    SearchQueryPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
      description: 'ページ番号 (NOTE: 1ページ辺りの応答は20件)'
    SearchQueryMylistAllow:
      name: with_mylisted
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        enum:
          - 1
          - 0
        example: 1
        minimum: 0
        maximum: 1
      description: マイリスト追加済みかを取得する0/1 (デフォルト1)
    SearchQueryMylistDeny:
      name: with_mylisted
      in: query
      schema:
        type: integer
        enum:
          - 0
          - 1
        example: 0
        default: 0
        minimum: 0
        maximum: 1
      description: マイリスト追加済みかを取得する0/1 (デフォルト0)
    SearchQueryPerPage:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
        default: 20
        enum:
          - 20
          - 40
          - 60
          - 80
          - 100
        example: 20
        minimum: 20
        maximum: 100
      description: 1ページ辺りの要素数
    SearchQuerySortCatalog:
      in: query
      schema:
        type: string
        default: d
        enum:
          - c
          - d
          - l
          - 'n'
        example: d
      description: 'ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前'
      name: sort
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
tags:
  - name: invites
security:
  - Authorization: []
