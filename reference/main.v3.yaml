openapi: 3.0.0
info:
  title: Gochiira Backend v3 API
  version: '1.0'
  contact:
    name: Omado
    url: 'https://twitter.com/shallow_omado'
    email: dsgamer777@gmail.com
  termsOfService: 'https://illust.gochiusa.team/terms'
  description: |-
    ごちイラ内でメインに使用されているAPI。
    現在Bot、ガチャ、フロントエンド の 3箇所で使用中。
  license:
    name: GPLv3
    url: 'https://www.gnu.org/licenses/gpl-3.0.ja.html'
servers:
  - url: 'https://api.gochiusa.team'
    description: Prod
  - url: 'http://127.0.0.1:8080'
    description: Dev
paths:
  '/accounts/{accountID}':
    parameters:
      - schema:
          type: integer
        name: accountID
        in: path
        required: true
        description: 取得したいユーザーのアカウントID
    get:
      summary: Get user info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStruct'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getAccount
      description: ユーザーのアカウント情報を取得します
      tags:
        - accounts
    put:
      summary: Edit user info
      operationId: editAccount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStruct'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      tags:
        - accounts
      description: |-
        アカウント情報を編集します
        (本人または管理者のみがリクエストできます)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountStruct'
            examples:
              example:
                value:
                  userDisplayID: omado
                  userName: お窓
                  userPassword: kafuuch1n0
                  userOldPassword: h0t0c0c0a
                  userFavorite: 1
                  userTheme: 0
                  userPermission: 0
                  userLineID: dosugamea
                  userTwitterID: shallow_omado
        description: |-
          ユーザー本人、もしくは管理者のみデータを変更できます
          変更したいカラムを与え、値に変更後の値を与えると変更できます
          パスワードを変更する場合のみ、例外的に現在のパスワードが要求されます
    delete:
      summary: Delete user info
      operationId: deleteAccount
      description: |-
        アカウントを削除します
        (本人または管理者のみがリクエストできます)
      tags:
        - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountRequest'
        description: 危険な操作のため、パスワードが必要になります
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
              examples: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
  '/accounts/{accountID}/upload_history':
    parameters:
      - schema:
          type: integer
        name: accountID
        in: path
        required: true
        description: 取得したいユーザーのアカウントID
    get:
      summary: Get upload history
      tags:
        - accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUploadHistoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getUploadHistory
      description: イラスト投稿履歴を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: string
            enum:
              - d
            example: d
            minLength: 1
            maxLength: 1
          in: query
          name: sort
          description: 'ソート方法 d:最終更新'
        - $ref: '#/components/parameters/SearchQueryOrder'
  '/accounts/{accountID}/reissue_token':
    parameters:
      - schema:
          type: integer
        name: accountID
        in: path
        required: true
        description: 取得したいユーザーのアカウントID
    post:
      summary: Reissue api key
      operationId: reissueToken
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReissueTokenResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: アカウントのログインキーを再生成します
      tags:
        - accounts
  /catalog/artists:
    get:
      summary: Get artist list
      tags:
        - catalog
      responses:
        '200':
          description: ヒットしたデータが応答のdata->contentsに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogArtistResponse'
              examples: {}
      operationId: getArtistList
      description: 絵師一覧を取得します
      parameters:
        - schema:
            type: integer
            default: 1
            minimum: 1
          in: query
          name: page
          description: ページ番号
        - schema:
            type: string
            default: c
            enum:
              - d
              - l
              - c
              - 'n'
            minLength: 1
            maxLength: 1
          in: query
          name: sort
          description: 'ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前'
        - schema:
            type: string
            enum:
              - d
              - a
            default: d
            example: d
            minLength: 1
            maxLength: 1
          in: query
          name: order
          description: 'ソート方向 最大が先頭: "d"esc, 最小が先頭:"a"sc'
    parameters: []
  /catalog/tags:
    get:
      summary: Get tag list
      tags:
        - catalog
      responses:
        '200':
          description: ヒットしたデータが応答のdata->contentsに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogTagResponse'
              examples: {}
      operationId: getTagList
      description: タグ一覧を取得します
      parameters:
        - schema:
            type: integer
            exclusiveMinimum: true
            minimum: 1
            default: 1
          in: query
          name: page
          description: ページ番号
        - schema:
            type: string
            enum:
              - c
              - d
              - l
              - 'n'
            default: c
            minLength: 1
            maxLength: 1
          in: query
          name: sort
          description: 'ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前'
        - schema:
            type: string
            enum:
              - d
              - a
            default: d
            example: d
            maxLength: 1
            minLength: 1
          in: query
          name: order
          description: 'ソート方向 最大が先頭: "d"esc, 最小が先頭:"a"sc'
    parameters: []
  /catalog/characters:
    get:
      summary: Get character list
      tags:
        - catalog
      responses:
        '200':
          description: ヒットしたデータが応答のdata->contentsに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogCharacterResponse'
              examples: {}
      operationId: getCharacterList
      description: キャラクター一覧を取得します
      parameters:
        - schema:
            type: integer
            default: 1
            minimum: 1
            exclusiveMinimum: true
          in: query
          name: page
          description: ページ番号
        - schema:
            type: string
            enum:
              - c
              - d
              - l
              - 'n'
            default: c
            minLength: 1
            maxLength: 1
          in: query
          name: sort
          description: 'ソート方法 c:ヒット数 d:最終更新 l:いいね数 n:名前'
        - schema:
            type: string
            default: d
            enum:
              - d
              - a
            example: d
            minLength: 1
            maxLength: 1
          in: query
          name: order
          description: 'ソート方向 最大が先頭: "d"esc, 最小が先頭:"a"sc'
  '/arts/{illustID}':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 取得したいイラストのID
    get:
      summary: Get art info
      tags:
        - arts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtStruct'
        '404':
          description: Not Found
      operationId: getArt
      description: 指定したイラストを取得します
    put:
      summary: Edit art
      operationId: put-arts-illustID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定したイラストの情報を編集します
        パラメータで与えられたデータに応じて柔軟に
        絵師名・タグ・キャラクター等を同時に書き換えます
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtStruct'
        description: ''
    delete:
      summary: Delete art
      operationId: delete-arts-illustID
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定したイラストを削除します
        削除してほしくないため非推奨とします
        (このエンドポイントから削除したイラストは
        参照が不可能になるだけであり一定日数サーバー上に残されます)
      deprecated: true
      tags:
        - arts
  /navigations/characters:
    get:
      summary: Get character navigation tab (for site)
      tags:
        - navigations
      responses:
        '200':
          description: 応答のdataに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNavigationGeneralResponse'
              examples: {}
      operationId: getCharacterNavigation
      description: |-
        イラスト数の多いキャラクター上位5件を取得します
        サイト内上部 ナビゲーションメニューで使用しています
  /navigations/artists:
    get:
      summary: Get artist navigation tab (for site)
      tags:
        - navigations
      responses:
        '200':
          description: 応答のdataに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNavigationGeneralResponse'
              examples: {}
      operationId: getArtistNavigation
      description: |-
        イラスト数の多い絵師上位5件を取得します
        サイト内上部 ナビゲーションメニューで使用しています
  /navigations/tags:
    get:
      summary: Get tag navigation tab (for site)
      tags:
        - navigations
      responses:
        '200':
          description: 応答のdataに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNavigationGeneralResponse'
              examples: {}
      operationId: getTagNavigation
      description: |-
        イラスト数の多いタグ上位5件を取得します
        サイト内上部 ナビゲーションメニューで使用しています
  /navigations/uploaders:
    get:
      summary: Get uploader navigation tab (for site)
      tags:
        - navigations
      responses:
        '200':
          description: 応答のdataに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNavigationGeneralResponse'
              examples: {}
      operationId: getUploaderNavigation
      description: |-
        イラスト数の多い投稿者上位5件を取得します
        サイト内上部 ナビゲーションメニューで使用しています
  /news/list:
    get:
      summary: Get news list
      tags:
        - news
      responses:
        '200':
          description: 応答のdataに配列で返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsListResponse'
              examples: {}
      operationId: getNewsList
      description: ニュース一覧を取得します
  '/news/{newsID}':
    parameters:
      - schema:
          type: integer
          minimum: 1
          exclusiveMinimum: true
        name: newsID
        in: path
        required: true
    get:
      summary: Get news
      tags:
        - news
      responses:
        '200':
          description: 応答のdataに返却されます
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewsResponse'
              examples: {}
      operationId: getNews
      description: 指定したニュースの内容を取得します
    delete:
      summary: Delete news
      operationId: deleteNews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNewsResponse'
      tags:
        - news
      description: |-
        指定したニュースを削除します
        管理者のみリクエストできます
    put:
      summary: Edit news
      operationId: editNews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutNewsResponse'
      tags:
        - news
      description: |-
        指定したニュースのタイトル/本文/カラーを編集します
        管理者のみリクエストできます
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNewsRequest'
  '/mylist/{mylistID}':
    parameters:
      - schema:
          type: integer
        name: mylistID
        in: path
        required: true
    get:
      summary: Get mylist data
      tags:
        - mylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMylistResponse'
              examples: {}
      operationId: getMylist
      description: 指定したマイリストに登録されたイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
    put:
      summary: Edit mylist
      operationId: editMylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutMylistResponse'
      description: マイリストのタイトル/説明文/内容(イラスト)を編集します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMylistRequest'
        description: 変更したいものを指定してリクエストします
      tags:
        - mylist
    delete:
      summary: Delete mylist
      operationId: deleteMylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMylistResponse'
      description: マイリストを削除します
      tags:
        - mylist
  /mylist/list:
    get:
      summary: Get mylist list
      tags:
        - mylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMylistListResponse'
              examples: {}
      operationId: getMylists
      description: 自分の作成したマイリスト一覧を取得します
  /search/tag:
    get:
      summary: Search by tag
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
              examples: {}
      operationId: searchArtByTag
      description: 指定したタグを持つイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: integer
          in: query
          name: id
          description: タグID
          required: true
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/character:
    get:
      summary: Search by character
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
              examples:
                example:
                  value:
                    status: 200
                    message: found
                    data:
                      title: パソコン
                      count: 1
                      current: 1
                      pages: 1
                      imgs:
                        - illustID: 1
                          artistID: 1
                          title: パソコンのキャラクター（ノートパソコン）(笑顔)
                          caption: |
                            快調に動く笑顔のノート型のコンピューターと、壊れて困った顔をしているコンピューターのイラストです。
                          date: '2021-01-07 12:31:01'
                          pages: 1
                          like: 53
                          mylist: 1
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2017/01/blog-post_792.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
      operationId: searchArtByCharacter
      description: 指定したキャラクターを持つイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: integer
          in: query
          name: id
          description: キャラID(タグIDと同一)
          required: true
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/artist:
    get:
      summary: Search by artist
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
              examples:
                example:
                  value:
                    status: 200
                    message: found
                    data:
                      title: みふね
                      count: 4
                      current: 1
                      pages: 1
                      imgs:
                        - illustID: 4
                          artistID: 1
                          title: 社畜のイラスト
                          caption: 会社に飼い慣らされ家畜のように扱われている男性会社員（サラリーマン）、俗にいう社畜のイラストです。
                          date: '2021-01-07 14:53:43'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: '?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 3
                          artistID: 1
                          title: なかなか当たらないガチャのイラスト
                          caption: 当たりが出る確率がとても低いガチャガチャを回し続けている人のイラストです。
                          date: '2021-01-07 14:51:59'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2016/02/blog-post_256.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 2
                          artistID: 1
                          title: 単位を落とす学生のイラスト（男性）
                          caption: 大学生の男の子が単位を落として焦っているイラストです。
                          date: '2021-01-07 12:53:04'
                          pages: 1
                          like: 2
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2016/10/blog-post_23.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 1
                          artistID: 1
                          title: パソコンのキャラクター（ノートパソコン）(笑顔)
                          caption: |
                            快調に動く笑顔のノート型のコンピューターと、壊れて困った顔をしているコンピューターのイラストです。
                          date: '2021-01-07 12:31:01'
                          pages: 1
                          like: 53
                          mylist: 1
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2017/01/blog-post_792.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
      operationId: searchArtByArtist
      description: 指定した絵師のイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: integer
          in: query
          name: id
          description: 絵師ID
          required: true
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/keyword:
    get:
      summary: Search by keyword
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
              examples:
                example:
                  value:
                    status: 200
                    message: found
                    data:
                      title: cafe
                      count: 1
                      current: 1
                      pages: 1
                      imgs:
                        - illustID: 6
                          artistID: 3
                          title: Cafe Image
                          caption: Ready for the breakfast rush to start
                          date: '2021-01-07 15:01:01'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://unsplash.com/photos/dwQRixazu9I?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 3
                            name: Andy Falconer
                          extension: jpg
      operationId: searchArtByKeyword
      description: 指定したキーワードを含むイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: string
            example: cafe
          in: query
          name: keyword
          description: 検索対象ワード
          required: true
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/all:
    get:
      summary: Search all arts
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
              examples:
                example:
                  value:
                    status: 200
                    message: found
                    data:
                      title: 全て
                      count: 8
                      current: 1
                      pages: 1
                      imgs:
                        - illustID: 8
                          artistID: 5
                          title: tea pours into white teacup photo
                          caption: ''
                          date: '2021-01-07 15:16:58'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://unsplash.com/photos/oBoELXgJR1w?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 5
                            name: CHI CHEN
                          extension: jpg
                        - illustID: 7
                          artistID: 4
                          title: clear glass cup with tea near brown ceramic teapot
                          caption: ''
                          date: '2021-01-07 15:15:28'
                          pages: 1
                          like: 1
                          mylist: 1
                          mylisted: true
                          originUrl: 'https://unsplash.com/photos/L82-kkEBOd0?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 4
                            name: Manki Kim
                          extension: jpg
                        - illustID: 6
                          artistID: 3
                          title: Cafe Image
                          caption: Ready for the breakfast rush to start
                          date: '2021-01-07 15:01:01'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://unsplash.com/photos/dwQRixazu9I?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 3
                            name: Andy Falconer
                          extension: jpg
                        - illustID: 5
                          artistID: 2
                          title: top view photography of heart latte coffee photo
                          caption: Cappuccino in a bed of fresh roasted coffee beans.
                          date: '2021-01-07 14:56:37'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://unsplash.com/photos/XOhI_kW_TaM?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 2
                            name: Nathan Dumlao
                          extension: jpg
                        - illustID: 4
                          artistID: 1
                          title: 社畜のイラスト
                          caption: 会社に飼い慣らされ家畜のように扱われている男性会社員（サラリーマン）、俗にいう社畜のイラストです。
                          date: '2021-01-07 14:53:43'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: '?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 3
                          artistID: 1
                          title: なかなか当たらないガチャのイラスト
                          caption: 当たりが出る確率がとても低いガチャガチャを回し続けている人のイラストです。
                          date: '2021-01-07 14:51:59'
                          pages: 1
                          like: 1
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2016/02/blog-post_256.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 2
                          artistID: 1
                          title: 単位を落とす学生のイラスト（男性）
                          caption: 大学生の男の子が単位を落として焦っているイラストです。
                          date: '2021-01-07 12:53:04'
                          pages: 1
                          like: 2
                          mylist: 0
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2016/10/blog-post_23.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
                        - illustID: 1
                          artistID: 1
                          title: パソコンのキャラクター（ノートパソコン）(笑顔)
                          caption: |
                            快調に動く笑顔のノート型のコンピューターと、壊れて困った顔をしているコンピューターのイラストです。
                          date: '2021-01-07 12:31:01'
                          pages: 1
                          like: 53
                          mylist: 1
                          mylisted: false
                          originUrl: 'https://www.irasutoya.com/2017/01/blog-post_792.html?page=1'
                          originService: 独自
                          nsfw: false
                          artist:
                            id: 1
                            name: みふね
                          extension: png
      operationId: searchArtByAll
      description: 登録されたイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/random:
    get:
      summary: Search by random
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: searchArtByRandom
      description: ランダムなイラストを取得します
      tags:
        - search
      parameters:
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /search/image/self:
    post:
      summary: Search by image
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSearchByImageResponse'
      operationId: searchArtByImage
      description: 画像からごちイラ内に登録されたイラストを検索します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSearchByImageRequest'
    parameters: []
  /search/image/saucenao:
    post:
      summary: Search by image at saucenao
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSearchByImageAtSauceNaoResponse'
      operationId: searchArtByImageUsingSaucenao
      description: 画像からSauceNAOに登録されたイラストを検索します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSearchByImageRequest'
  /accounts/me:
    get:
      summary: Get user info (self)
      tags:
        - accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountMeResponse'
      operationId: getSelfAccount
      description: |-
        自分自身にまつわる情報をすべて取得します
        通常、ログイン時に一度だけ呼び出されます
    parameters: []
  /accounts/login/form:
    post:
      summary: Login with form
      tags:
        - accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLoginWithFormResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: loginWithForm
      description: IDとパスワードを用いてユーザー認証し、APIトークンを発行します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLoginWithFormRequest'
            examples:
              user:
                value:
                  id: test_user
                  password: this_is_only_for_test
              admin:
                value:
                  id: test_admin
                  password: this_is_only_for_test
        description: ユーザーIDとパスワードをパラメータに取ります
  /artists:
    post:
      summary: Create artist
      operationId: createArtist
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        新しい絵師を生成します(イラスト投稿時に存在しなければ自動で作成されるため
        直接操作する必要はありません)
      deprecated: true
      tags:
        - artists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistStruct'
  '/artists/{artistID}':
    get:
      summary: Get artist
      tags:
        - artists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistStruct'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getArtist
      description: 指定した絵師の情報を取得します。存在しない情報欄にはnullが入ります。
    parameters:
      - schema:
          type: integer
        name: artistID
        in: path
        required: true
        description: 対象の絵師ID
    delete:
      summary: Delete artist
      operationId: deleteArtist
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定した絵師の情報を削除します
        (イラストによって参照されていない場合のみ削除できるため、通常利用機会はありません)
      deprecated: true
      tags:
        - artists
    put:
      summary: Edit artist
      operationId: editArtist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistStruct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定した絵師の情報を置き換えます。
        リクエストで指定されたパラメータだけを置き換えます。
      tags:
        - artists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistStruct'
        description: ''
  '/arts/{illustID}/replace':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 置き換えしたい(画質が低い方の)イラストID
    put:
      summary: Combine art info
      operationId: replaceArt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReplaceArtResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      tags:
        - arts
      description: |-
        パスパラメータで指定された低画質なイラストに対して
        クエリパラメータで指定されたより画質の良いイラストで統合(置き換え)処理を行います。
        画質が低い方のいいね・タグ・出典・コメントが画質が高い方のイラストに対して統合されます。
        置き換えられた画質が低い方のイラストは検索結果に表示されなくなりますが、IDを直接指定すれば閲覧できる状態で残ります。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReplaceArtRequest'
  '/arts/{illustID}/replace_simulate':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 置き換えしたい(画質が低い方の)イラストID
    put:
      summary: Combine art info(simulate)
      operationId: replaceArtSimulate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReplaceArtSimulateResponse'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      tags:
        - arts
      description: |-
        パスパラメータで指定された低画質なイラストに対して
        クエリパラメータで指定されたより画質の良いイラストで統合(置き換え)処理の検証を行います。
        画質が低い方のいいね・タグ・出典・コメントが画質が高い方のイラストに対して統合されます。
        置き換えられた画質が低い方のイラストは検索結果に表示されなくなりますが、IDを直接指定すれば閲覧できる状態で残ります。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReplaceArtRequest'
  '/arts/{illustID}/tags':
    get:
      summary: Get art tags
      tags:
        - arts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtTagsResponse'
        '404':
          description: Not Found
      operationId: getArtTags
      description: 指定したイラストに付いているタグのみを一覧で取得します
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 対象のイラストID
    put:
      summary: Edit art tags
      operationId: editArtTags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtTagsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定したイラストのタグ一覧に、与えられたIDのタグを追加します
        (イラスト本体の編集時に付けられたタグ名から
        自動的にタグIDを引き出し追加/削除を行う処理が追加されたため
        こちらのエンドポイントを使用する必要はありません)
      deprecated: true
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutArtTagsRequest'
    delete:
      summary: Delete art tag
      operationId: deleteArtTags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteArtTagsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定したイラストのタグ一覧から、与えられたIDのタグを削除します
        (イラスト本体の編集時に付けられたタグ名から
        自動的にタグIDを引き出し追加/削除を行う処理が追加されたため
        こちらのエンドポイントを使用する必要はありません)
      deprecated: true
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteArtTagsRequest'
  '/arts/{illustID}/characters':
    get:
      summary: Get art characters
      tags:
        - arts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtTagsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      operationId: getArtCharacters
      description: 指定したイラストに付いているキャラクターのみを一覧で取得します
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 対象のイラストID
    put:
      summary: Edit art characters
      operationId: editArtCharacters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtCharactersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMessageResponse'
      description: |-
        指定したイラストのキャラクター一覧に、与えられたIDのキャラクターを追加します
        (イラスト本体の編集時に付けられたキャラクター名から
        自動的にキャラクターIDを引き出し追加/削除を行う処理が追加されたため
        こちらのエンドポイントを使用する必要はありません)
      deprecated: true
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutArtChractersRequest'
    delete:
      summary: Delete art character
      operationId: deleteArtCharacters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteArtCharactersResponse'
      description: |-
        指定したイラストのキャラクター一覧から、与えられたIDのキャラクターを削除します
        (イラスト本体の編集時に付けられたキャラクター名から
        自動的にキャラクターIDを引き出し追加/削除を行う処理が追加されたため
        こちらのエンドポイントを使用する必要はありません)
      deprecated: true
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteArtCharactersRequest'
  '/arts/{illustID}/likes':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: いいねしたいイラストのID
    put:
      summary: Plus art like
      operationId: addArtLike
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtLikesResponse'
      tags:
        - arts
      description: |-
        指定したイラストのいいね数を1増加させます
        (いいねの種別を選択できる仕様となったため、このエンドポイントは現在非推奨ですが
        種別を指定するいいねよりも応答が速いため残っています)
      deprecated: true
    get:
      summary: Get art likes
      operationId: getArtLikes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtLikesResponse'
      description: 指定したイラストのいいね数だけを取得します
      tags:
        - arts
  '/arts/{illustID}/likes/{likeType}':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: いいねしたいイラストのID
      - schema:
          type: integer
        name: likeType
        in: path
        required: true
        description: 'いいね種別 1:黄 2:緑 3:赤 4:青'
    put:
      summary: Plus art like (with using star)
      operationId: addArtLikeByStar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtLikesResponse'
      tags:
        - arts
      description: |-
        指定したイラストのいいね数を1増加させます
        いいねする都度、likeTypeに指定されたスターを消費します
        (ToyMoneyApiに問い合わせを行った上で増加処理を行うため若干時間がかかります)
  '/arts/{illustID}/views':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 閲覧したイラストのID
    put:
      summary: Plus art view
      operationId: addArtView
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtViewsResponse'
      tags:
        - arts
      description: |-
        指定したイラストの閲覧回数を1増加させます
        同一アカウントからのイラスト閲覧は1日1回のみカウントされます
    get:
      summary: Get art views
      operationId: getArtViews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtViewsResponse'
      description: 指定したイラストの閲覧回数のみを取得します
      tags:
        - arts
  '/arts/{illustID}/comments':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 対象のイラストID
    get:
      summary: Get art comments
      tags:
        - arts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtCommentsResponse'
      operationId: getArtComments
      description: 指定したイラストに付いているコメントのみを一覧で取得します
    post:
      summary: Add art comment
      operationId: addArtComment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostArtCommentResponse'
      description: 指定したイラストにコメントを追加します
      tags:
        - arts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostArtCommentRequest'
  '/arts/{illustID}/comments/{commentID}':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
        description: 対象のイラストID
      - schema:
          type: integer
        name: commentID
        in: path
        required: true
        description: 編集したいコメントのID
    put:
      summary: Edit art comment
      operationId: editArtCommentById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArtCommentResponse'
      tags:
        - arts
      description: |-
        指定したイラストに付けたコメントを編集します
        (ActivityPubを使用している場合、編集後の内容が再投稿されます)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutArtCommentRequest'
    delete:
      summary: Delete art comment
      operationId: deleteArtCommentById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteArtCommentResponse'
      description: 指定したイラストに付けたコメントを削除します
      tags:
        - arts
    get:
      summary: Get art comment
      operationId: getArtCommentById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArtCommentResponse'
      description: 指定したイラストに付いている、指定されたIDのコメントを取得します
      tags:
        - arts
  /arts:
    post:
      summary: Create art
      operationId: addArt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostArtResponse'
      tags:
        - arts
      description: パラメータで与えられたイラストを投稿します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostArtRequest'
  /search/uploaders:
    get:
      summary: Search by uploader
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: searchArtByUploader
      description: 指定した投稿者のイラスト一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
  /catalog/uploaders:
    get:
      summary: Get uploader list
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogUploaderResponse'
      operationId: getUploaderList
      description: 投稿者一覧を取得します
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
  /characters:
    post:
      summary: Add character
      operationId: addCharacter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCharacterResponse'
      tags:
        - characters
      description: キャラクタータグを作成します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterStruct'
            examples: {}
  '/characters/{charaID}':
    parameters:
      - schema:
          type: integer
        name: charaID
        in: path
        required: true
    get:
      summary: Get character
      tags:
        - characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCharacterResponse'
      operationId: getCharacter
      description: |-
        キャラクタータグを取得します
        (内部的にタグ情報と同じです)
    put:
      summary: Edit character
      operationId: editCharacter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutCharacterResponse'
      tags:
        - characters
      description: |-
        キャラクター情報を編集します
        (内部的にタグ情報と同じです)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterStruct'
    delete:
      summary: Delete character
      operationId: deleteCharacter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCharacterResponse'
      tags:
        - characters
      description: |-
        キャラクタータグを削除します
        (内部的にタグ情報と同じです)
      deprecated: true
  /invites:
    post:
      summary: Create invitation
      operationId: createInvitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInviteResponse'
      tags:
        - invites
      description: |-
        招待コードを発行します、一般ユーザーは1人につき1コードまで作成できます。
        管理者はcode/countを指定すると任意のコードを指定数作成できます。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInviteRequest'
    delete:
      summary: Delete invitation
      operationId: deleteInvitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInviteResponse'
      description: 招待コードを無効化します
      tags:
        - invites
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteInviteRequest'
  /mutes:
    post:
      summary: Add mute
      operationId: addMute
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMuteResponse'
      tags:
        - mutes
      description: ミュート情報を追加します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMuteRequest'
    get:
      summary: Get mutes
      operationId: getMutes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMutesResponse'
      tags:
        - mutes
      description: ミュート中の絵師/タグ情報一覧を取得します
    delete:
      summary: Remove mute
      operationId: deleteMute
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMuteResponse'
      tags:
        - mutes
      description: ミュート情報を削除します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMuteRequest'
  /mylist:
    post:
      summary: Create mylist
      operationId: createMylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMylistResponse'
      description: マイリストを作成します
      tags:
        - mylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMylistRequest'
  '/mylist/{mylistID}/finds':
    parameters:
      - schema:
          type: integer
        name: mylistID
        in: path
        required: true
    post:
      summary: Find arts registered
      operationId: findInMylistByIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMylistFindsResponse'
      description: |-
        指定したイラスト(単数/複数)がマイリストに含まれているかを判定します
        検索リクエストでwith_mylisted=0としている場合、必要となる可能性があります
      tags:
        - mylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMylistFindsRequest'
  /news:
    post:
      summary: Add news
      operationId: addNews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNewsResponse'
      description: |-
        ニュースを追加します
        (管理者のみリクエストできます)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNewsRequest'
      tags:
        - news
  /notify/clients:
    get:
      summary: Get notify clients
      tags:
        - notify
      operationId: getNotifyClients
      description: 現在のユーザーが設定済みの通知クライアント一覧を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifyClientsResponse'
      parameters:
        - schema:
            type: integer
          in: query
          name: type
          description: '0:全て 1:LineNotify 2:WebPush'
    parameters: []
  /notify/clients/web:
    post:
      summary: Register webpush notify client
      operationId: registerWebNotifyClient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRegisterWebPushResponse'
      description: |-
        クライアント側で作成したパブリック/プライベートVAPIDキーを
        userID、クライアント名、通知レベルと共にサーバーのデータベースに登録し
        通知クライアントの1種として保存する(何個でも設定できる)
      tags:
        - notify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterWebPushRequest'
        description: ''
    parameters: []
  /notify/conditions:
    post:
      summary: Register notify condition
      operationId: registerNotifyCondition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostNotifyConditionResponse'
      description: 通知条件を追加します
      tags:
        - notify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotifyConditionRequest'
    parameters: []
    get:
      summary: Get notify conditions
      operationId: getNotifyConditions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifyConditionsResponse'
      description: 通知条件一覧を取得します
      tags:
        - notify
  /notify/clients/line:
    post:
      summary: Register line notify client
      operationId: registerLineNotifyClient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRegisterLineNotifyResponse'
      description: '"ユーザー発行の"LINENotifyのトークンとデバイス名をPOSTして、通知クライアントの一種として保存する。(何個でも設定できる)'
      tags:
        - notify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterLineNotifyRequest'
    parameters: []
  '/notify/clients/{clientID}':
    parameters:
      - schema:
          type: integer
        name: clientID
        in: path
        required: true
    get:
      summary: Get notify client
      tags:
        - notify
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifyClientResponse'
      operationId: getNotifyClient
      description: 指定した通知クライアント情報を取得します
    put:
      summary: Edit notify client
      operationId: editNotifyClient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutNotifyClientResponse'
      description: 指定した通知クライアント情報を編集します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotifyClientRequest'
      tags:
        - notify
    delete:
      summary: Delete notify client
      operationId: deleteNotifyClient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNotifyClientResponse'
      description: 指定した通知クライアントを削除します
      tags:
        - notify
  '/notify/conditions/{conditionID}':
    parameters:
      - schema:
          type: integer
        name: conditionID
        in: path
        required: true
    get:
      summary: Get notify condition
      tags:
        - notify
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifyConditionResponse'
      operationId: getNotifyCondition
      description: 通知条件を取得します
    put:
      summary: Edit notify condition
      operationId: editNotifyCondition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutNotifyConditionResponse'
      tags:
        - notify
      description: 通知条件を編集します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyConditionStruct'
    delete:
      summary: Delete notify condition
      operationId: deleteNotifyCondition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNotifyConditionResponse'
      tags:
        - notify
      description: 通知条件を削除します
  /ranking/yearly/views:
    get:
      summary: Get yearly views ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getYearlyViewsRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 年間閲覧数ランキングを取得します
  /ranking/yearly/likes:
    get:
      summary: Get yearly likes ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getYearlyLikesRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 年間いいね数ランキングを取得します
  /ranking/monthly/views:
    get:
      summary: Get monthly views ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getMonthlyViewsRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 月間閲覧数ランキングを取得します
  /ranking/monthly/likes:
    get:
      summary: Get monthly likes ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getMonthlyLikesRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 月間いいね数ランキングを取得します
  /ranking/weekly/views:
    get:
      summary: Get weekly views ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getWeeklyViewsRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 週間閲覧数ランキングを取得します
  /ranking/weekly/likes:
    get:
      summary: Get weekly likes ranking
      tags:
        - ranking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getWeeklyLikesRanking
      parameters:
        - $ref: '#/components/parameters/SearchQueryPage'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryMylistDeny'
      description: 週間いいね数ランキングを取得します
  '/report/arts/{illustID}':
    parameters:
      - schema:
          type: integer
        name: illustID
        in: path
        required: true
    post:
      summary: Report art
      tags:
        - report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportGeneralResponse'
      operationId: reportArt
      description: |-
        指定したイラストを運営に通報します
        むやみに利用するとアカウントが停止される可能性があります
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportGeneralRequest'
  '/report/tags/{tagID}':
    parameters:
      - schema:
          type: integer
        name: tagID
        in: path
        required: true
    post:
      summary: Report tag
      tags:
        - report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportGeneralResponse'
      operationId: reportTag
      description: |-
        指定したタグを運営に通報します
        むやみに利用するとアカウントが停止される可能性があります
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportGeneralRequest'
  '/report/user/{userID}':
    parameters:
      - schema:
          type: integer
        name: userID
        in: path
        required: true
    post:
      summary: Report user
      tags:
        - report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportGeneralResponse'
      operationId: reportUser
      description: |-
        指定したユーザーを運営に通報します
        むやみに利用するとアカウントが停止される可能性があります
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportGeneralRequest'
  '/report/wiki/{articleID}':
    parameters:
      - schema:
          type: integer
        name: articleID
        in: path
        required: true
    post:
      summary: Report article
      tags:
        - report
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportGeneralResponse'
      operationId: reportArticle
      description: |-
        指定した記事を運営に通報します
        むやみに利用するとアカウントが停止される可能性があります
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportGeneralRequest'
  /scrape:
    post:
      summary: Scrape content
      operationId: scrapeContent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostScrapeResponse'
      tags:
        - scrape
      description: |-
        渡されたURLのページ情報をスクレイピングします
        むやみに利用するとアカウントが停止される可能性があります
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostScrapeRequest'
  /upload:
    post:
      summary: Upload content
      operationId: uploadContent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUploadResponse'
      description: |-
        画像や動画を投稿するエンドポイントです
        むやみに利用するとアカウントが停止される可能性があります
      tags:
        - upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUploadRequest'
  /search/image/ascii2d:
    get:
      summary: Search by image at ascii2d
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSearchByImageAtAscii2dResponse'
      operationId: searchArtByImageUsingAscii2d
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSearchByImageRequest'
      description: 画像からAscii2dに登録されたイラストを検索します
  /search/tag/multiple:
    get:
      summary: Search by multiple tag
      tags:
        - search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: searchArtByMultipleTag
      description: |-
        複数のタグを指定してイラストを検索します
        アカウントのレベルによって指定できる数は変動します(予定)
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
        - schema:
            type: string
          in: query
          name: id
          description: タグIDをカンマ区切りで複数指定します
        - $ref: '#/components/parameters/SearchQueryMylistAllow'
    parameters: []
  /garbage_collect:
    post:
      summary: Garbage collect
      operationId: garbageCollect
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGarbageCollectResponse'
      description: |-
        参照されていない 絵師情報/タグ情報を削除します
        (cron等でやってもいいかもしれないですが 現在は手動)
      tags:
        - garbage_collect
  /tags:
    post:
      summary: Add tag
      operationId: addTag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTagResponse'
      tags:
        - tags
      description: |-
        タグを追加します
        (イラストの編集リクエスト内で指定していれば追加できるため非推奨です)
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagsStruct'
  '/tags/{tagID}':
    parameters:
      - schema:
          type: integer
        name: tagID
        in: path
        required: true
    get:
      summary: Get tag
      tags:
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagResponse'
      operationId: getTag
      description: タグ情報を取得します
    put:
      summary: Edit tag
      operationId: editTag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutTagResponse'
      tags:
        - tags
      description: |-
        タグ情報を編集します
        タグ種別の変更もできます
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagsStruct'
    delete:
      summary: Delete tag
      operationId: deleteTag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTagResponse'
      tags:
        - tags
      description: |-
        タグを削除します
        (既にイラストに属しているタグの場合削除できません)
  /tags/finds:
    get:
      summary: Find tags by keyword
      tags:
        - tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindTagsResponse'
      operationId: findTags
      parameters:
        - schema:
            type: string
          in: query
          name: keyword
          description: 検索したいワードを指定します
      description: キーワードからタグを検索します
  /timeline/follow:
    post:
      summary: Follow artist
      operationId: followArtist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTimelineFollowResponse'
      description: 絵師をフォローします
      tags:
        - timeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTimelineGeneralRequest'
    parameters: []
  /timeline/unfollow:
    post:
      summary: Unfollow artist
      operationId: unfollowArtist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTimelineUnfollowResponse'
      description: 絵師のフォローを解除します
      tags:
        - timeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTimelineGeneralRequest'
    parameters: []
  /timeline:
    get:
      summary: Get timeline
      tags:
        - timeline
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSearchGeneralResponse'
      operationId: getTimeline
      parameters:
        - $ref: '#/components/parameters/SearchQuerySort'
        - $ref: '#/components/parameters/SearchQueryOrder'
        - $ref: '#/components/parameters/SearchQueryPage'
      description: タイムラインを取得します
  /timeline/following:
    get:
      summary: Get followings
      tags:
        - timeline
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTimelineFollowingResponse'
      operationId: getFollowing
      description: フォロー中の絵師ID一覧を取得します
  /wiki:
    post:
      summary: Add wiki article
      operationId: addWikiArticle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWikiArticleResponse'
      description: Wikiの記事を作成します
      tags:
        - wiki
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWikiArticleRequest'
  '/wiki/{articleID}':
    parameters:
      - schema:
          type: string
        name: articleID
        in: path
        required: true
    get:
      summary: Get wiki article
      tags:
        - wiki
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWikiArticleResponse'
      operationId: getWikiArticle
      description: Wikiの記事を取得します
    put:
      summary: Edit wiki article
      operationId: editWikiArticle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutWikiArticleResponse'
      description: Wikiの記事を編集します
      tags:
        - wiki
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutWikiArticleRequest'
    delete:
      summary: Delete wiki article
      operationId: deleteWikiArticle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWikiArticleResponse'
      tags:
        - wiki
      description: Wikiの記事を削除します
  /wiki/find:
    get:
      summary: Find wiki article
      tags:
        - wiki
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindWikiArticleResponse'
      operationId: findWikiArticle
      description: Wikiの記事が存在するかを確認します
      parameters:
        - schema:
            type: integer
          in: query
          name: type
          description: '対象の記事種別 0:ユーザー 1:タグ 2:絵師'
        - schema:
            type: integer
          in: query
          name: id
          description: 対象の記事ID
  '/activitypub/uploader/{userID}/outbox':
    get:
      summary: Provide federation user message
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/GetActivityPubGeneralResponse'
      operationId: getActivityPubOutbox
      description: 他のサーバーがこのユーザーのメッセージを受け取るときにGETされる
    parameters:
      - schema:
          type: integer
        name: userID
        in: path
        required: true
  '/activitypub/artist/{artistID}/outbox':
    get:
      summary: Provide federation artist message
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/GetActivityPubGeneralResponse'
      operationId: getActivityPubArtistOutbox
      description: 他のサーバーがこのユーザーのメッセージを受け取るときにGETされる
    parameters:
      - schema:
          type: integer
        name: artistID
        in: path
        required: true
  /activitypub/server/inbox:
    post:
      summary: Recieve federation to server message
      operationId: postActivityPubServerInbox
      responses:
        '201':
          description: Created
      description: 他のサーバーがこのサーバーに向けてメッセージを送るときにPOSTされる
      tags:
        - activitypub
      requestBody:
        content:
          application/activity+json:
            schema:
              $ref: '#/components/schemas/PostActivityPubGeneralRequest'
    get:
      summary: Check federation server message
      operationId: getActivityPubServerinbox
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/GetActivityPubGeneralResponse'
      description: このサーバーが自分自身に来ている通知などを取得する際にGETされる
      tags:
        - activitypub
  /activitypub/server/outbox:
    get:
      summary: Provide federation server message
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/GetActivityPubGeneralResponse'
      operationId: getActivityPubServerOutbox
      description: 他のサーバーがこのサーバーのメッセージを受け取るときにGETされる
    post:
      summary: Send federation server message
      operationId: postActivityPubServerOutbox
      responses:
        '201':
          description: Created
      description: このサーバーが他のサーバーに向けてメッセージを送るときにPOSTされる
      tags:
        - activitypub
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostActivityPubGeneralRequest'
  '/activitypub/artist/{artistID}':
    parameters:
      - schema:
          type: string
        name: artistID
        in: path
        required: true
    get:
      summary: Get activitypub artist actor
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/ActivityPubActorStruct'
      operationId: get-activitypub-displayID
      description: |-
        ActivityPubのユーザー情報(絵師)を返す
        (実際使うときは https://example.com/artist/{displayID} からリダイレクト?)
  '/activitypub/uploader/{userID}':
    parameters:
      - schema:
          type: string
        name: userID
        in: path
        required: true
    get:
      summary: Get activitypub uploader actor
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/ActivityPubActorStruct'
      operationId: get-activitypub-uploader-ID
      description: |-
        ActivityPubのユーザー情報(投稿者)を返す
        (実際使うときは https://example.com/uploader/{displayID} からリダイレクト?)
  /activitypub/server:
    get:
      summary: Get activitypub server base
      tags:
        - activitypub
      responses:
        '200':
          description: OK
          content:
            application/activity+json:
              schema:
                $ref: '#/components/schemas/ActivityPubActorStruct'
      operationId: get-activitypub-server
      description: ActivityPubのユーザー情報(サーバー)を返す
  /accounts:
    post:
      summary: Create account
      operationId: createAccount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAccountResponse'
      tags:
        - accounts
      description: 新しいアカウントを作成します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccountRequest'
components:
  schemas:
    SearchResultStruct:
      title: SearchResultStruct
      type: object
      x-examples:
        example-1:
          illustID: 0
          artistID: 0
          title: string
          caption: string
          date: string
          pages: 0
          like: 0
          mylist: 0
          mylisted: true
          originUrl: string
          originService: string
          nsfw: false
          artist:
            name: string
          extension: string
      description: 検索の応答モデル。配列で並んで返される。
      properties:
        illustID:
          type: integer
          description: イラストID
        artistID:
          type: integer
          description: 絵師ID(前との互換のために用意、非推奨)
        title:
          type: string
          minLength: 1
          description: イラスト(作品)名
        caption:
          type: string
          description: |-
            説明文
            NOTE: 通常出典記載の説明文と同じ物が入る
        date:
          type: string
          minLength: 19
          maxLength: 19
          example: '2021-01-07 12:48:42'
          description: '登録日(%Y-%m-%d %H:%M:%S)'
        pages:
          type: integer
          description: グループの場合のページ数(未使用)
        like:
          type: integer
          description: 累計いいね数
        mylist:
          type: integer
          description: マイリスト済みのユーザー数
        mylisted:
          type: boolean
          description: リクエストしたユーザーがマイリストしているか
        originUrl:
          type: string
          minLength: 1
          description: 出典URL
        originService:
          type: string
          minLength: 1
          description: 出典のサービス名
        nsfw:
          type: boolean
          description: アダルトコンテンツか否か
        artist:
          type: object
          description: 絵師情報
          required:
            - name
            - id
          properties:
            name:
              type: string
              minLength: 1
              description: 絵師名
            id:
              type: integer
              description: 絵師のサイト内通し番号
        extension:
          type: string
          minLength: 1
          description: RAWファイルの拡張子
          enum:
            - png
            - jpg
            - jpeg
            - webp
            - mp4
          example: png
        similarity:
          type: number
          description: 元画像との類似度(画像検索のみ)
          minimum: 0
          maximum: 1
      required:
        - illustID
        - artistID
        - title
        - caption
        - date
        - pages
        - like
        - mylist
        - mylisted
        - originUrl
        - originService
        - nsfw
        - artist
        - extension
    NewsStruct:
      title: NewsStruct
      type: object
      description: サイト内の新着情報モデル。
      x-examples: {}
      properties:
        id:
          type: integer
          description: ニュースID
        date:
          type: string
          minLength: 19
          maxLength: 19
          description: 投稿日付時刻
        color:
          type: integer
          maximum: 9
          minimum: 0
          description: ニュース表記色(色はフロントの実装次第)
        title:
          type: string
          minLength: 1
          maxLength: 50
          description: ニュースタイトル 50文字まで
        body:
          type: string
          minLength: 1
          maxLength: 3000
          description: ニュース本文 3000文字まで
      required:
        - id
        - date
        - color
        - title
        - body
    NavigationResult:
      title: NavigationResult
      type: object
      description: サイト内上部ナビゲーションのエンドポイントで用いる応答モデル
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        id:
          type: integer
        count:
          type: integer
      required:
        - name
        - id
        - count
    PostAccountRequest:
      title: PostAccountRequest
      type: object
      x-examples:
        example:
          displayID: omado
          name: お窓
          password: kafuuch1n0
          favorite: 1
          theme: 0
          permission: 0
          lineID: dosugamea
          twitterID: shallow_omado
      description: アカウントの編集に使うリクエスト
      properties:
        displayID:
          type: string
          description: (Twitterのような)表示IDを指定します。ここで指定したIDがログインに使用されます。英数字のみ入力できます。
          example: omado
          maxLength: 20
          minLength: 3
        name:
          type: string
          description: 他のユーザーに表示されるユーザー名/投稿者名
          example: お窓
          maxLength: 20
          minLength: 1
        password:
          type: string
          description: 新しいパスワードを入力します
          example: kafuuch1n0
          format: password
          maxLength: 50
          minLength: 8
        favorite:
          type: integer
          description: ユーザーの推しキャラのIDを選択します
          example: 1
          format: int32
          maximum: 100
          minimum: 0
        theme:
          type: integer
          description: サイト内のテーマ色(もしくはレイアウト?)が変更できることを想定して仮に置かれたものです(未使用)
          example: 0
          exclusiveMinimum: false
          minimum: 0
          maximum: 9
          format: int32
        permission:
          type: integer
          description: |-
            ユーザーが持つ権限を指定します、SysOpのみ変更できます。
            0:User 5:Admin 9:Sysop になっています
            (変更されたユーザーは再ログインが必要です)
          example: 0
          enum:
            - 0
            - 5
            - 9
          format: int32
          minimum: 0
          maximum: 9
        lineID:
          type: string
          description: LINEと連携している場合にユーザーページに表示されることを想定して仮に置かれたものです(未使用)
          example: dosugamea
          maxLength: 30
        twitterID:
          type: string
          description: Twitterと連携している場合にユーザーページに表示されることを想定して仮に置かれたものです(未使用)
          example: shallow_omado
          maxLength: 30
    AccountStruct:
      title: AccountStruct
      type: object
      x-examples:
        example:
          displayID: omado
          name: お窓
          password: kafuuch1n0
          oldPassword: h0t0c0c0a
          favorite: 1
          theme: 0
          permission: 0
          lineID: dosugamea
          twitterID: shallow_omado
      description: アカウントの取得/編集に使うリクエスト
      properties:
        displayID:
          type: string
          description: (Twitterのような)表示IDを指定します。ここで指定したIDがログインに使用されます。英数字のみ入力できます。
          example: omado
          maxLength: 20
          minLength: 3
        name:
          type: string
          description: 他のユーザーに表示されるユーザー名/投稿者名
          example: お窓
          maxLength: 20
          minLength: 1
        password:
          type: string
          description: 新しいパスワードを入力します
          example: kafuuch1n0
          format: password
          maxLength: 50
          minLength: 8
        oldPassword:
          type: string
          description: |-
            現時点のパスワードを入力します。
            userPasswordを変更する場合に必要となります。
          example: h0t0c0c0a
          format: password
          maxLength: 50
          minLength: 8
        favorite:
          type: integer
          description: ユーザーの推しキャラのIDを選択します
          example: 1
          format: int32
          maximum: 100
          minimum: 0
        theme:
          type: integer
          description: サイト内のテーマ色(もしくはレイアウト?)が変更できることを想定して仮に置かれたものです(未使用)
          example: 0
          exclusiveMinimum: false
          minimum: 0
          maximum: 9
          format: int32
        permission:
          type: integer
          description: |-
            ユーザーが持つ権限を指定します、SysOpのみ変更できます。
            0:User 5:Admin 9:Sysop になっています
            (変更されたユーザーは再ログインが必要です)
          example: 0
          enum:
            - 0
            - 5
            - 9
          format: int32
          minimum: 0
          maximum: 9
        lineID:
          type: string
          description: LINEと連携している場合にユーザーページに表示されることを想定して仮に置かれたものです(未使用)
          example: dosugamea
          maxLength: 30
        twitterID:
          type: string
          description: Twitterと連携している場合にユーザーページに表示されることを想定して仮に置かれたものです(未使用)
          example: shallow_omado
          maxLength: 30
        totpEnabled:
          type: boolean
          default: false
          description: TOTPを使用するか否か
    DeleteAccountRequest:
      title: DeleteAccountRequest
      type: object
      properties:
        password:
          type: string
          format: password
          description: 削除したいアカウントのパスワード
      required:
        - password
      description: アカウントの削除に使うリクエスト
      x-examples:
        example:
          password: kafuuch1n0
    ArtStruct:
      description: イラスト編集リクエスト
      type: object
      title: ArtStruct
      x-examples:
        example-1:
          title: string
          caption: string
          date: stringstringstrings
          pages: 0
          like: 0
          view: 0
          originUrl: string
          originService: string
          nsfw: true
          hash: string
          extension: jpg
          artist:
            name: string
            id: 0
          user:
            id: 0
            name: string
          status: 0
          width: 0
          height: 0
          tag:
            - string
          chara:
            - string
          group:
            - string
          system:
            - string
          filesize: 0
          replace:
            - illustID: 0
              title: string
              caption: string
              date: string
              originService: string
              originUrl: string
              width: 0
              height: 0
              filesize: string
          star:
            yellow: 0
            green: 0
            red: 0
            blue: 0
      properties:
        title:
          type: string
          minLength: 1
          description: 'イラスト(作品)名 NOTE: 連番の場合は (2) (3)のような番号が入る'
        caption:
          type: string
          minLength: 1
          description: '説明文 NOTE: 通常出典に記載されていた内容そのままが入る'
        date:
          type: string
          minLength: 19
          maxLength: 19
          description: '登録日時(%Y-%m-%d %H:%M:%S)'
        pages:
          type: integer
          description: グループになっている場合の総ページ数(未使用)
        like:
          type: integer
          description: 累計いいね数
        view:
          type: integer
          description: 累計閲覧数
        originUrl:
          type: string
          minLength: 1
          description: 出典URL
        originService:
          type: string
          minLength: 1
          description: 出典サービス名
        nsfw:
          type: boolean
          description: アダルトコンテンツかどうか
        hash:
          type: string
          description: 画像ハッシュ(pHash)
        extension:
          type: string
          description: 拡張子(通常、jpgもしくはpng)
          enum:
            - jpg
            - jpeg
            - png
            - webp
            - gif
          example: jpg
        artist:
          type: object
          description: 絵師情報
          properties:
            name:
              type: string
              description: 絵師名(絵師IDをそのままで、他のイラストも同時に変更する時用)
            id:
              type: integer
              description: 絵師のサイト内通し番号(別の絵師のIDを付けたい場合用)
          required:
            - id
        user:
          type: object
          description: 投稿者情報
          properties:
            id:
              type: integer
              description: 投稿者のユーザーID
            name:
              type: string
              description: 投稿したユーザーのユーザー名
          required:
            - id
        status:
          type: integer
          minimum: 0
          maximum: 9
          description: '公開/非公開等の表示状態 0:公開 1:置換済み 2:削除(ユーザー) 3:削除(管理者)'
        width:
          type: integer
          description: RAW画像の横方向のピクセル数
        height:
          type: integer
          description: RAW画像の縦方向のピクセル数
        tag:
          type: array
          description: '指定したいタグを"名称(文字列)"で指定する NOTE: 内部的に同じものなのでtag/chara/group/systemは全部同じ場所に入力してOK'
          items:
            type: string
        chara:
          type: array
          description: '指定したいタグを"名称(文字列)"で指定する NOTE: 内部的に同じものなのでtag/chara/group/systemは全部同じ場所に入力してOK'
          items:
            type: string
        group:
          type: array
          description: '指定したいタグを"名称(文字列)"で指定する NOTE: 内部的に同じものなのでtag/chara/group/systemは全部同じ場所に入力してOK'
          items:
            type: string
        system:
          type: array
          description: '指定したいタグを"名称(文字列)"で指定する NOTE: 内部的に同じものなのでtag/chara/group/systemは全部同じ場所に入力してOK'
          items:
            type: string
        filesize:
          type: integer
          description: ファイルサイズをbytesで入力
        replace:
          type: array
          description: 置き換え履歴データ
          items:
            $ref: '#/components/schemas/ReplaceStruct'
        star:
          type: object
          description: スター情報
          properties:
            yellow:
              type: integer
              description: イエロースター数
            green:
              type: integer
              description: グリーンスター数
            red:
              type: integer
              description: レッドスター数
            blue:
              type: integer
              description: ブルースター数
    PostLoginWithFormRequest:
      title: PostLoginWithFormRequest
      type: object
      description: ''
      x-examples:
        user:
          value:
            id: test_user
            password: this_is_only_for_test
        admin:
          value:
            id: test_admin
            password: this_is_only_for_test
      properties:
        id:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        totp_code:
          type: string
      required:
        - id
        - password
    PostArtistRequest:
      title: PostArtistRequest
      type: object
      x-examples:
        example:
          artistName: string
          artistDescription: string
          groupName: string
          pixivID: string
          twitterID: string
          mastodon: string
          homepage: string
      properties:
        artistName:
          type: string
          description: 絵師名
        artistDescription:
          type: string
          description: 絵師の説明(未使用)
        groupName:
          type: string
          description: サークル名
        pixivID:
          description: pixivID(内部ID)配列
          type: array
          items:
            type: integer
        twitterID:
          type: array
          description: twitterID(内部ID)配列
          items:
            type: string
        mastodon:
          description: マストドンのユーザーページアドレス(配列)
          type: array
          items:
            type: string
        homepage:
          type: array
          description: 関連サイトアドレス(配列)
          items:
            type: string
    PutArtistRequest:
      title: PutArtistRequest
      type: object
      x-examples:
        example:
          artistName: string
          artistDescription: string
          groupName: string
          pixivID: string
          twitterID: string
          mastodon: string
          homepage: string
      properties:
        artistName:
          type: string
          description: 絵師名
        artistDescription:
          type: string
          description: 絵師の説明(未使用)
        groupName:
          type: string
          description: サークル名
        pixivID:
          description: pixivID(内部ID)配列
          type: array
          items:
            type: integer
        twitterID:
          type: array
          description: twitterID(内部ID)配列
          items:
            type: string
        mastodon:
          description: マストドンのユーザーページアドレス(配列)
          type: array
          items:
            type: string
        homepage:
          type: array
          description: 関連サイトアドレス(配列)
          items:
            type: string
    TagStruct:
      title: TagStruct
      type: object
      x-examples:
        example-1:
          id: 1
          name: 香風智乃
      description: タグデータモデル
      properties:
        id:
          type: integer
          minimum: 1
          format: int32
          description: サイト内通しタグ番号
        user:
          type: object
          description: ユーザー情報
          properties:
            id:
              type: integer
              description: ユーザーID
            name:
              type: string
              description: ユーザー名
        name:
          type: string
          minLength: 1
          maxLength: 20
          description: タグの名称
        nsfw:
          type: boolean
          description: アダルトコンテンツが含まれるタグか
          default: false
        description:
          type: string
          description: タグの説明文
        count:
          type: integer
          description: タグに属する作品数
        lcount:
          type: integer
          description: タグに属するいいね数
      required:
        - id
        - name
        - nsfw
        - description
        - count
        - lcount
    ReplaceStruct:
      description: イラストを置き換えた情報のモデル(簡易型イラストモデル)
      type: object
      x-examples:
        example:
          illustID: 1
          title: チノちゃん
          caption: ''
          date: '2021-03-05 01:27:22'
          originService: Pixiv
          originUrl: 'https://www.pixiv.net/artworks/88062684'
          width: 750
          height: 1200
          filesize: 2M
      title: ReplaceStruct
      properties:
        illustID:
          type: integer
          description: サイト内イラスト通し番号
        title:
          type: string
          minLength: 1
          description: 作品名
        caption:
          type: string
          minLength: 1
          description: 作品の説明文
        date:
          type: string
          description: 投稿日付
        originService:
          type: string
          minLength: 1
          description: 出典サービス名
        originUrl:
          type: string
          minLength: 1
          description: 出典URL
        width:
          type: integer
          description: RAW画像の横幅
        height:
          type: integer
          description: RAW画像の縦幅
        filesize:
          type: string
          minLength: 1
          description: ファイルサイズに単位を付けた人間が読めるもの
      required:
        - illustID
        - title
        - caption
        - date
        - originService
        - originUrl
        - width
        - height
        - filesize
    UploadHistoryStruct:
      description: アップロード履歴
      type: object
      title: UploadHistory
      x-examples:
        example:
          uploadID: 12045
          started: '2021-02-21 22:24:22'
          finished: '2021-02-21 22:24:27'
          status: 5
          illustID: 9381
      properties:
        uploadID:
          type: integer
          format: int32
          description: 通し投稿履歴番号(インデックス用)
          minimum: 1
          example: 1
        started:
          type: string
          description: データ登録処理開始時刻
          minLength: 19
          maxLength: 19
          example: '2021-02-21 22:24:22'
        finished:
          type: string
          description: データ登録完了時刻
          minLength: 19
          maxLength: 19
          example: '2021-02-21 22:24:27'
        status:
          type: integer
          description: '登録処理結果 5:成功 9:内部エラー'
          minimum: 0
          maximum: 9
          example: 5
          enum:
            - 0
            - 5
            - 9
          default: 0
        illustID:
          type: integer
          format: int32
          description: 投稿に成功した場合入るID
          minimum: 1
          example: 1
      required:
        - uploadID
        - started
        - finished
        - status
        - illustID
    DeleteMylistResponse:
      title: DeleteMylistArtResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-not-found:
          status: 404
          message: The mylist was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetUploadHistoryResponse:
      title: GetUploadHistoryResponse
      type: object
      properties:
        title:
          type: string
          description: 検索関連共通化のため"アップロード履歴"が入る
          example: アップロード履歴
          enum:
            - アップロード履歴
          maxLength: 8
          minLength: 8
        count:
          type: integer
          description: 総ヒット数
          format: int32
        current:
          type: integer
          description: 現在開いているページ
          example: 1
          minimum: 1
        pages:
          type: integer
          description: ヒット数をページ毎の個数で割ったページ数
          minimum: 0
          example: 1
          format: int32
        contents:
          type: array
          uniqueItems: true
          description: |-
            指定された範囲で一致するデータ
            一致するものがなければ空配列
          minItems: 0
          items:
            $ref: '#/components/schemas/UploadHistoryStruct'
      x-examples:
        success:
          value:
            status: 200
            message: ok
            data:
              title: アップロード履歴
              count: 2321
              current: 1
              pages: 117
              contents:
                - uploadID: 12045
                  started: '2021-02-21 22:24:22'
                  finished: '2021-02-21 22:24:27'
                  status: 5
                  illustID: 9381
                - uploadID: 12044
                  started: '2021-02-21 22:23:41'
                  finished: '2021-02-21 22:23:45'
                  status: 5
                  illustID: 9380
                - uploadID: 12036
                  started: '2021-02-21 20:30:39'
                  finished: '2021-02-21 20:30:43'
                  status: 5
                  illustID: 9375
                - uploadID: 12004
                  started: '2021-02-20 20:20:19'
                  finished: '2021-02-20 20:20:29'
                  status: 5
                  illustID: 9355
                - uploadID: 12003
                  started: '2021-02-20 20:03:30'
                  finished: '2021-02-20 20:03:46'
                  status: 5
                  illustID: 9354
                - uploadID: 11972
                  started: '2021-02-19 21:30:58'
                  finished: '2021-02-19 21:31:00'
                  status: 5
                  illustID: 9336
                - uploadID: 11971
                  started: '2021-02-19 21:30:52'
                  finished: '2021-02-19 21:30:55'
                  status: 5
                  illustID: 9335
                - uploadID: 11970
                  started: '2021-02-19 21:30:46'
                  finished: '2021-02-19 21:30:49'
                  status: 5
                  illustID: 9334
                - uploadID: 10756
                  started: '2021-01-20 03:12:57'
                  finished: '2021-01-20 03:13:04'
                  status: 5
                  illustID: 8418
                - uploadID: 10755
                  started: '2021-01-20 03:09:31'
                  finished: '2021-01-20 03:09:39'
                  status: 5
                  illustID: 8417
                - uploadID: 10754
                  started: '2021-01-20 02:57:00'
                  finished: '2021-01-20 02:57:09'
                  status: 5
                  illustID: 8416
                - uploadID: 10753
                  started: '2021-01-20 02:56:44'
                  finished: '2021-01-20 02:56:52'
                  status: 5
                  illustID: 8415
                - uploadID: 10663
                  started: '2021-01-17 22:21:22'
                  finished: '2021-01-17 22:21:35'
                  status: 5
                  illustID: 8364
                - uploadID: 10658
                  started: '2021-01-17 21:14:02'
                  finished: '2021-01-17 21:14:06'
                  status: 5
                  illustID: 8360
                - uploadID: 10657
                  started: '2021-01-17 21:07:54'
                  finished: '2021-01-17 21:07:57'
                  status: 5
                  illustID: 8359
                - uploadID: 10656
                  started: '2021-01-17 21:07:47'
                  finished: '2021-01-17 21:07:51'
                  status: 5
                  illustID: 8358
                - uploadID: 10655
                  started: '2021-01-17 21:07:41'
                  finished: '2021-01-17 21:07:43'
                  status: 5
                  illustID: 8357
                - uploadID: 10654
                  started: '2021-01-17 21:07:34'
                  finished: '2021-01-17 21:07:37'
                  status: 5
                  illustID: 8356
                - uploadID: 10653
                  started: '2021-01-17 21:07:27'
                  finished: '2021-01-17 21:07:30'
                  status: 5
                  illustID: 8355
                - uploadID: 10652
                  started: '2021-01-17 21:06:35'
                  finished: '2021-01-17 21:06:39'
                  status: 5
                  illustID: 8354
        no-hit:
          value:
            status: 200
            message: ok
            data:
              title: アップロード履歴
              count: 0
              current: 1
              pages: 1
              contents: []
        no-account:
          status: 404
          message: The account data was not found.
    GetAccountResponse:
      title: GetAccountResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            userID: 3
            displayID: omado
            name: お窓
            favorite: 1
        failed:
          status: 404
          message: The account data was not found.
      properties:
        status:
          type: integer
          description: HTTPステータスコードが入ります
          format: int32
          minimum: 100
          maximum: 999
          default: 200
          example: 200
        message:
          type: string
          minLength: 1
          description: ok もしくは エラー内容
        data:
          $ref: '#/components/schemas/AccountStruct'
      required:
        - status
        - message
    DeleteAccountResponse:
      title: DeleteAccountResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok thanks for using!
        failed:
          status: 400
          message: authorization failed
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostReissueTokenResponse:
      title: PostReissueTokenResponse
      type: object
      x-examples:
        example:
          status: 200
          message: ok
          api_key: DUMMY_API_KEY
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        api_key:
          type: string
          minLength: 1
      required:
        - status
        - message
    PutAccountResponse:
      title: PutAccountResponse
      type: object
      x-examples:
        success:
          value:
            status: 200
            message: Update complete
        server-error:
          value:
            status: 500
            message: Server bombed.
        password-mismatch:
          value:
            status: 400
            message: password mismatch
        not-satisfied-params:
          value:
            status: 400
            message: Request parameters are not satisfied.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostAccountResponse:
      title: PostAccountResponse
      type: object
      x-examples:
        success:
          status: 201
          message: Created
          api_key: DUMMY_API_KEY
        server-error:
          status: 500
          message: Server bombed.
        password-mismatch:
          status: 400
          message: Bad request.
        not-satisfied-params:
          status: 400
          message: Request parameters are not satisfied.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        apiKey:
          type: string
      required:
        - status
        - message
    GetArtResponse:
      title: GetArtResposnse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            illustID: 8
            title: tea pours into white teacup photo
            caption: ''
            date: '2021-01-07 15:16:58'
            pages: 1
            like: 1
            view: 2
            mylist: 0
            mylisted: false
            originUrl: 'https://unsplash.com/photos/oBoELXgJR1w?page=1'
            originService: 独自
            nsfw: false
            hash: 12743176166585612000
            extension: jpg
            artist:
              id: 5
              name: CHI CHEN
            user:
              id: 2
              name: ドマオーさん
            status: 0
            width: 3333
            height: 4391
            filesize: 491K
            tag:
              - id: 21
                name: ティーカップ
                nsfw: false
              - id: 20
                name: 紅茶
                nsfw: false
              - id: 18
                name: カフェ
                nsfw: false
            chara:
              - id: 20
                name: サンプル
                nsfw: false
            group:
              - id: 20
                name: サンプル
                nsfw: false
            system:
              - id: 4
                name: 2021年01月
                nsfw: false
              - id: 17
                name: 4K
                nsfw: false
            replace: []
            star:
              yellow: 1
              green: 0
              blue: 0
              red: 0
        failed:
          status: 404
          message: The art was not found.
      description: ''
      properties:
        arts:
          $ref: '#/components/schemas/ArtStruct'
    PutArtResponse:
      title: PutArtResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Updated.
        failed-permission:
          status: 400
          message: You don't have enough permission
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          format: int32
          default: 200
          example: 200
          minimum: 100
          maximum: 999
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteArtResponse:
      title: DeleteArtResponse
      type: object
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      x-examples:
        success:
          status: 200
          message: ok
        failed-not-found:
          status: 404
          message: The art was not found.
        failed-permission:
          status: 400
          message: You don't have enougth permission.
      required:
        - status
        - message
    DeleteArtCommentResponse:
      title: DeleteArtCommentResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-permission:
          status: 400
          message: You don't have enough permission.
        failed-not-found:
          status: 404
          message: The comment was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
      description: コメント削除応答
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetAccountMeResponse:
      title: GetAccountMeResponse
      type: object
      x-examples:
        success-user:
          status: 200
          message: ok
          data:
            userID: 3
            displayID: test_user
            name: Test
            favorite: 42
            lineConnect: true
            lineNotify: true
            oneSignalNotify: true
            permission: 0
            registeredDate: '2021-01-07 12:48:42'
            inviter:
              id: 1
              name: ドマオー
            invite:
              id: 1
              code: DISABLED
              invited: 0
              enabled: false
            mylist:
              id: 3
            apiKey: DUMMY_API_KEY
        success-admin:
          status: 200
          message: ok
          data:
            userID: 4
            displayID: test_admin
            name: Admin
            favorite: 43
            lineConnect: true
            lineNotify: true
            oneSignalNotify: true
            permission: 9
            registeredDate: '2021-01-07 12:48:42'
            inviter:
              id: 1
              name: ドマオー
            invite:
              id: 1
              code: DISABLED
              invited: 0
              enabled: false
            mylist:
              id: 4
            apiKey: DUMMY_API_KEY
        failed:
          status: 500
          message: Server exploded
      properties:
        user:
          type: object
          properties:
            userID:
              type: integer
              description: ユーザー通し番号
            displayID:
              type: string
              minLength: 1
              description: 表示ID(英数字のみ)
            name:
              type: string
              minLength: 1
              description: ユーザー名(日本語可)
            favorite:
              type: integer
              description: 推しキャラのID
            lineNotify:
              type: boolean
              description: LINENotifyに連携済かどうか
            permission:
              type: integer
              description: '権限レベル 0:一般 5:Admin 9:SysOp'
            registeredDate:
              type: string
              minLength: 1
              description: 登録日時(datetime)
            inviter:
              type: object
              description: 招待者の情報
              required:
                - id
                - name
              properties:
                id:
                  type: integer
                  description: 招待者のユーザー通し番号
                name:
                  type: string
                  minLength: 1
                  description: 招待者の名前
            invite:
              type: object
              description: 招待情報
              required:
                - id
                - code
                - invited
                - enabled
              properties:
                id:
                  type: integer
                  description: 招待通し番号
                code:
                  type: string
                  description: 招待コード(shortuuid)
                  minLength: 6
                  maxLength: 12
                invited:
                  type: integer
                  description: 招待した人数の累計(誰を招待したかは表示されない)
                enabled:
                  type: boolean
                  description: 招待可能な状態か否か
            apiKey:
              type: string
              minLength: 1
              description: ログインに使用したAPIキー
          required:
            - userID
            - displayID
            - name
            - favorite
            - lineNotify
            - permission
            - registeredDate
            - inviter
            - invite
            - apiKey
        '':
          type: string
    PostLoginWithFormResponse:
      title: PostLoginWithFormResponse
      type: object
      x-examples:
        login-success:
          value:
            status: 200
            message: welcome back
            apiKey: DUMMY_API_KEY
        login-failed:
          value:
            status: 404
            message: account not found
      description: ''
      properties:
        apiKey:
          type: string
          minLength: 1
    PostArtistResponse:
      title: PostArtistResponse
      type: object
      x-examples:
        success-created:
          status: 201
          message: Created
          artistID: 1
        failed-bombed:
          status: 500
          message: Server bombed
        failed-invalid:
          status: 400
          message: Request parameter is invalid.
        failed-exists:
          status: 409
          message: The artist is already exist.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          example: 200
          default: 200
        message:
          type: string
        artistID:
          type: integer
          description: 作成に成功した場合入る絵師ID
      required:
        - status
        - message
    GetArtistResponse:
      title: GetArtistResponse
      type: object
      x-examples:
        success-default:
          artist:
            id: 1
            userID: 1
            name: 彩電
            description: ''
            group: ''
            pixivID: ''
            twitterID: ''
            mastodon: ''
            homepage: ''
        success-fulfilled:
          artist:
            id: 1
            userID: 1
            name: 彩電
            description: ごちうさなどのきらら系中心に、オリジナルなど
            group: こねこぼたん
            pixivID: '40436'
            twitterID: harufcs
            mastodon: 'https://pawoo.net/@saiden'
            homepage: 'http://konebota.x0.com/PAGE/'
      properties:
        artist:
          $ref: '#/components/schemas/ArtistStruct'
    PutArtistResponse:
      title: PutArtistResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Updated.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-already-exists:
          status: 400
          message: The artist name is already taken.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteArtistResponse:
      title: DeleteArtistResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-not-found:
          status: 404
          message: The artist was not found.
        failed-permission:
          status: 400
          message: You don't have enougth permission.
        failed-locked:
          status: 409
          message: The artist is referenced by art.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    ArtistStruct:
      title: ArtistStruct
      type: object
      properties:
        id:
          type: integer
          description: 絵師のID
        userID:
          description: 絵師情報を登録したユーザーのID
          type: integer
        name:
          type: string
          minLength: 1
          description: 絵師の名前(ペンネーム正式名)
          example: 彩電
        description:
          type: string
          example: ごちうさなどのきらら系中心に、オリジナルなどのサークルやってます
          description: 絵師を説明する文章(1行分)
        group:
          type: string
          example: こねこぼたん
          description: サークル名
        pixivID:
          type: array
          description: PixivのユーザーID(数字)
          items:
            type: integer
            example: 40436
        twitterID:
          type: array
          description: Twitterの表示ID(英数字+)
          items:
            type: string
            example: harufcs
        mastodon:
          type: array
          format: uri-reference
          description: マストドンアカウントのURL
          items:
            type: string
            example: 'https://pawoo.net/@saiden'
        homepage:
          description: HPのURL
          type: array
          items:
            type: string
        count:
          type: integer
          description: 絵師に属する作品数
        lcount:
          type: integer
          description: 絵師に属するいいね数
      required:
        - id
        - name
        - description
        - group
        - pixivID
        - twitterID
        - mastodon
        - count
        - lcount
      x-examples:
        example-1:
          id: 0
          userID: 0
          name: 彩電
          description: ごちうさなどのきらら系中心に、オリジナルなどのサークルやってます
          group: こねこぼたん
          pixivID:
            - 40436
          twitterID:
            - harufcs
          mastodon:
            - 'https://pawoo.net/@saiden'
          homepage:
            - string
          count: 0
          lcount: 0
    PostReplaceArtRequest:
      title: PostReplaceArtRequest
      type: object
      description: ''
      properties:
        illustID:
          type: integer
          description: より画質が高いイラストのID
          minimum: 1
      required:
        - illustID
    PostReplaceArtResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Replace succeed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-not-found:
          status: 404
          message: The art data was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
      title: PostReplaceArtResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostReplaceArtSimulateResponse:
      description: ''
      type: object
      x-examples:
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-not-found:
          status: 404
          message: The art data was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
        success:
          status: 200
          message: ok
          data:
            to:
              title: string
              caption: string
              date: stringstringstrings
              pages: 0
              like: 0
              view: 0
              originUrl: string
              originService: string
              nsfw: true
              hash: string
              extension: jpg
              artist:
                name: string
                id: 0
              user:
                id: 0
                name: string
              status: 0
              width: 0
              height: 0
              tag:
                - string
              chara:
                - string
              group:
                - string
              system:
                - string
              filesize: 0
              replace:
                - illustID: 0
                  title: string
                  caption: string
                  date: string
                  originService: string
                  originUrl: string
                  width: 0
                  height: 0
                  filesize: string
              star:
                yellow: 0
                green: 0
                red: 0
                blue: 0
            from:
              title: string
              caption: string
              date: stringstringstrings
              pages: 0
              like: 0
              view: 0
              originUrl: string
              originService: string
              nsfw: true
              hash: string
              extension: jpg
              artist:
                name: string
                id: 0
              user:
                id: 0
                name: string
              status: 0
              width: 0
              height: 0
              tag:
                - string
              chara:
                - string
              group:
                - string
              system:
                - string
              filesize: 0
              replace:
                - illustID: 0
                  title: string
                  caption: string
                  date: string
                  originService: string
                  originUrl: string
                  width: 0
                  height: 0
                  filesize: string
              star:
                yellow: 0
                green: 0
                red: 0
                blue: 0
      title: PostReplaceArtSimulateResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          properties:
            to:
              $ref: '#/components/schemas/ArtStruct'
            from:
              $ref: '#/components/schemas/ArtStruct'
      required:
        - status
        - message
    GetArtTagsResponse:
      title: GetArtTagsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            - id: 1
              name: 香風智乃
              nsfw: false
        failed-not-found:
          status: 404
          message: The art don't have any tag.
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagStruct'
    GetArtChractersResponse:
      title: GetArtCharactersResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            - id: 1
              name: 香風智乃
              nsfw: false
        failed-not-found:
          status: 404
          message: The art don't have any tag.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/TagStruct'
      required:
        - status
        - message
    PutArtTagsRequest:
      title: PutArtTagsRequest
      type: object
      properties:
        tagID:
          type: array
          items:
            type: integer
      x-examples:
        example-1:
          tagID:
            - 1
            - 2
            - 3
    PutArtTagsResponse:
      title: PutArtTagsResponse
      type: object
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
        message:
          type: string
      x-examples:
        success:
          status: 200
          message: Add succeed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-invalid-id:
          status: 400
          message: 'tagID is invalid, or not specified.'
        failed-already-exists:
          status: 400
          message: The tag is already registered to the art.
        failed-internal-error:
          status: 500
          message: Server bombed.
    DeleteArtTagsRequest:
      title: DeleteArtTagsRequest
      type: object
      x-examples:
        example-1:
          tagID:
            - 1
            - 2
            - 3
      properties:
        tagID:
          type: array
          description: イラストから削除したいタグ配列
          items:
            type: integer
      required:
        - tagID
    DeleteArtTagsResponse:
      title: DeleteArtTagsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Remove succeed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-invalid-tags:
          status: 400
          message: 'tagID is invalid, or not specified.'
        failed-not-registered:
          status: 400
          message: The tag is not registered to the art.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PutArtChractersRequest:
      title: PutArtCharactersRequest
      type: object
      properties:
        tagID:
          type: array
          items:
            type: integer
      x-examples:
        example-1:
          tagID:
            - 1
            - 2
            - 3
    PutArtCharactersResponse:
      title: PutArtCharactersResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Add succeed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-invalid-id:
          status: 400
          message: 'tagID is invalid, or not specified.'
        failed-already-exists:
          status: 400
          message: The tag is already registered to the art.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteArtCharactersRequest:
      title: DeleteArtCharactersRequest
      type: object
      x-examples:
        example-1:
          tagID:
            - 1
            - 2
            - 3
      properties:
        tagID:
          type: array
          description: イラストから削除したいキャラクタータグ配列
          items:
            type: integer
      required:
        - tagID
    DeleteArtCharactersResponse:
      title: DeleteArtCharactersResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Remove succeed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-invalid-tags:
          status: 400
          message: 'tagID is invalid, or not specified.'
        failed-not-registered:
          status: 400
          message: The tag is not registered to the art.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
      required:
        - status
        - message
    GetArtLikesResponse:
      title: GetArtLikesResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          likes: 1204
        failed-not-found:
          status: 404
          message: The art was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        likes:
          type: object
          properties:
            yellow:
              type: integer
            green:
              type: integer
            red:
              type: integer
            blue:
              type: integer
      required:
        - status
        - message
    GetArtViewsResponse:
      title: GetArtViewsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          views: 1204
        failed-not-found:
          status: 404
          message: The art was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        views:
          type: integer
          minimum: 0
      required:
        - status
        - message
    GetArtCommentResponse:
      title: GetArtCommentResponse
      type: object
      x-examples:
        failed-not-found:
          status: 404
          message: The comment was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
        success:
          status: 200
          message: ok
          comment:
            user:
              id: 1
              name: お窓
            comment:
              id: 1
              created: '2021-03-07 03:41:40'
              updated: '2021-03-07 03:41:40'
              body: 香風智乃
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          example: 200
          default: 200
        message:
          type: string
          minLength: 1
        comment:
          $ref: '#/components/schemas/CommentStruct'
      required:
        - status
        - message
    PutArtLikesResponse:
      title: PutArtLikesResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Update succeed.
          likes: 1
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-too-many:
          status: 400
          message: You can't add star anymore today.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        likes:
          type: integer
          example: 1
          minimum: 1
      required:
        - status
        - message
    PutArtViewsResponse:
      title: PutArtViewsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Update succeed.
          views: 1
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-already-viewed:
          status: 409
          message: You can't add view anymore today.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        views:
          type: integer
          example: 1
          minimum: 1
      required:
        - status
        - message
    GetArtCommentsResponse:
      title: GetArtCommentsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          comments:
            - user:
                id: 1
                name: Omado
              comment:
                created: '2021/03/13 11:29:24'
                updated: '2021/03/13 11:29:24'
                body: string
                id: 1
        success-no-data:
          status: 200
          message: ok
          comments: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          default: 200
          example: 200
        message:
          type: string
          minLength: 1
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentStruct'
      required:
        - status
        - message
    CommentStruct:
      description: コメント型
      type: object
      x-examples:
        example:
          user:
            id: 0
            name: string
          comment:
            id: 0
            created: string
            updated: string
            body: string
      title: Comment
      properties:
        user:
          type: object
          required:
            - id
            - name
          description: 投稿ユーザー情報
          properties:
            id:
              type: integer
              description: ユーザーID
            name:
              type: string
              minLength: 1
              description: ユーザー名
        comment:
          type: object
          required:
            - created
            - updated
            - body
            - id
          description: コメント情報
          properties:
            created:
              type: string
              description: 投稿時刻(datetime)
              minLength: 19
              maxLength: 19
              example: '2021/03/13 11:29:24'
            updated:
              type: string
              description: 更新時刻(datetime)
              minLength: 19
              maxLength: 19
              example: '2021/03/13 11:29:24'
            body:
              type: string
              description: コメント本文
              maxLength: 500
            id:
              type: integer
              description: '"作品別" コメントID'
              minimum: 1
              format: int32
      required:
        - user
        - comment
    PostArtCommentRequest:
      title: PostArtCommentRequest
      type: object
      x-examples:
        example:
          comment: テストコメント
      properties:
        comment:
          type: string
          description: コメント本文
      required:
        - comment
    PostArtCommentResponse:
      title: PostArtCommentResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PutArtCommentRequest:
      title: PutArtCommentRequest
      type: object
      description: ''
      x-examples:
        example:
          comment: 香風智乃すき
      properties:
        comment:
          type: string
      required:
        - comment
    PutWikiArticleResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Update comment succeed.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-not-found:
          status: 404
          message: The comment was not found.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
      properties:
        status:
          type: integer
          example: 200
          minimum: 100
          maximum: 999
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
      title: PutWikiArticleResponse
    PutArtCommentResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Update article succeed.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-not-found:
          status: 404
          message: The article was not found.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
      title: PutWikiArticleResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PutNotifyClientRequest:
      title: PutNotifyClientRequest
      type: object
      description: ''
      x-examples:
        change-name:
          name: Chino laptop2
        change-level:
          level: 5
        change-both:
          name: Chino laptop3
          level: 5
      properties:
        name:
          type: string
          description: クライアント名
        level:
          type: integer
          description: '通知レベル 1:緊急時のみ 5:タグ絵師通知のみ 9:すべて'
          enum:
            - 1
            - 5
            - 9
          minimum: 1
          maximum: 9
          example: 9
          default: 9
    PutNotifyClientResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Updated.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-not-found:
          status: 404
          message: The notify client was not found.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
      title: PutNotifyClientResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostArtRequest:
      description: ''
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: 作品名
        caption:
          type: string
          minLength: 1
          description: 作品説明文
        originUrl:
          type: string
          minLength: 1
          description: 出典URL
        originService:
          type: string
          minLength: 1
          description: 出典サービス名
        imageUrl:
          type: string
          minLength: 1
          description: ダウンロード元の画像URL(ローカルもしくはoriginUrl+?page=1)
        artist:
          type: object
          description: 絵師情報
          required:
            - name
          properties:
            twitterID:
              type: string
              minLength: 1
            pixivID:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
              description: 絵師名をいれれば勝手に絵師IDが入る
        tag:
          type: array
          description: タグ名配列
          items:
            type: string
        chara:
          type: array
          description: キャラ名配列(未登録の名称が入るとキャラとして登録)
          items:
            type: string
        group:
          type: array
          description: グループ名配列(未登録の名称が入るとグループとして登録)
          items:
            type: string
        system:
          type: array
          description: システム名配列(未登録の名称が入るとシステムとして登録)
          items:
            type: string
        nsfw:
          type: boolean
          description: アダルトコンテンツか否か
      required:
        - title
        - caption
        - originUrl
        - originService
        - imageUrl
        - artist
        - tag
        - chara
        - group
        - system
      x-examples:
        example:
          title: メグ「今日はマメ風呂だよ〜！」
          caption: ''
          originService: Twitter
          originUrl: 'https://twitter.com/syuyakustar/status/1368170402778935297?page=1'
          imageUrl: 'https://twitter.com/syuyakustar/status/1368170402778935297?page=1'
          artist:
            name: みかミシェ㌠
          tag:
            - 奈津恵
          chara: []
          group: []
          system:
            - 2021年03月
          nsfw: false
      title: PostArtRequest
    PostArtResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 202
          message: Accepted.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-invalid-artist:
          status: 400
          message: Artist paramators are invalid.
        failed-invalid-url:
          status: 400
          message: Invalid image url
      title: PostArtResponse
      properties:
        status:
          type: integer
          format: int32
          default: 200
          example: 200
          minimum: 100
          maximum: 999
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetCatalogArtistResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: found
          data:
            title: 絵師
            count: 5
            current: 1
            pages: 1
            contents:
              - id: 5
                name: CHI CHEN
                description: ''
                group: ''
                pixivID: ''
                twitterID: ''
                mastodon: ''
                homepage: ''
                endpoint: 'https://example.com'
                count: 1
                lcount: 1
              - id: 4
                name: Manki Kim
                description: ''
                group: ''
                pixivID: ''
                twitterID: ''
                mastodon: ''
                homepage: ''
                endpoint: 'https://example.com'
                count: 1
                lcount: 1
              - id: 3
                name: Andy Falconer
                description: ''
                group: ''
                pixivID: ''
                twitterID: ''
                mastodon: ''
                homepage: ''
                endpoint: 'https://example.com'
                count: 1
                lcount: 1
              - id: 2
                name: Nathan Dumlao
                description: ''
                group: ''
                pixivID: ''
                twitterID: ''
                mastodon: ''
                homepage: ''
                endpoint: 'https://example.com'
                count: 1
                lcount: 1
              - id: 1
                name: みふね
                description: ''
                group: ''
                pixivID: ''
                twitterID: ''
                mastodon: ''
                homepage: ''
                endpoint: 'https://example.com'
                count: 4
                lcount: 57
        success-no-data:
          status: 200
          message: found
          data:
            title: 絵師
            count: 0
            current: 1
            pages: 1
            contents: []
      title: GetCatalogArtistResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - contents
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
            current:
              type: integer
            pages:
              type: integer
            contents:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/ArtistStruct'
      required:
        - status
        - message
        - data
    GetCatalogTagResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: found
          data:
            title: タグ
            count: 4073
            current: 1
            pages: 204
            contents:
              - id: 4175
                name: 魅惑の脚線美
                description: null
                nsfw: false
                endpoint: null
                count: 1
                lcount: 0
              - id: 3931
                name: 2021年02月
                description: null
                nsfw: false
                endpoint: null
                count: 574
                lcount: 172
              - id: 1230
                name: タイツ越しのパンツ
                description: null
                nsfw: 0
                endpoint: null
                count: 4
                lcount: 10
              - id: 5
                name: 宇治松千夜
                description: 千夜さん
                nsfw: 0
                endpoint: null
                count: 909
                lcount: 925
              - id: 510
                name: HD
                description: null
                nsfw: 0
                endpoint: null
                count: 1022
                lcount: 745
              - id: 89
                name: パンツ
                description: null
                nsfw: 0
                endpoint: null
                count: 134
                lcount: 376
              - id: 192
                name: ぱんつ
                description: null
                nsfw: 0
                endpoint: null
                count: 84
                lcount: 75
              - id: 422
                name: 差分
                description: null
                nsfw: 0
                endpoint: null
                count: 521
                lcount: 279
              - id: 2
                name: 保登心愛
                description: ココアさん
                nsfw: 0
                endpoint: null
                count: 2140
                lcount: 4543
              - id: 469
                name: FHD
                description: null
                nsfw: 0
                endpoint: null
                count: 2696
                lcount: 2818
              - id: 1
                name: 香風智乃
                description: チノちゃん
                nsfw: 0
                endpoint: null
                count: 4366
                lcount: 12920
              - id: 414
                name: R18
                description: null
                nsfw: 0
                endpoint: null
                count: 1869
                lcount: 681
              - id: 471
                name: 2K
                description: null
                nsfw: 0
                endpoint: null
                count: 1392
                lcount: 1639
              - id: 546
                name: 女の子
                description: null
                nsfw: 0
                endpoint: null
                count: 498
                lcount: 264
              - id: 4174
                name: eQGMN5bqb8n
                description: null
                nsfw: 0
                endpoint: null
                count: 2
                lcount: 0
              - id: 920
                name: めぐみ
                description: null
                nsfw: 0
                endpoint: null
                count: 69
                lcount: 6
              - id: 81
                name: 奈津恵
                description: null
                nsfw: 0
                endpoint: null
                count: 689
                lcount: 622
              - id: 4173
                name: eTH7NS2kKk7
                description: null
                nsfw: 0
                endpoint: null
                count: 2
                lcount: 0
              - id: 2085
                name: ほとここあ
                description: null
                nsfw: 0
                endpoint: null
                count: 3
                lcount: 0
              - id: 468
                name: 4K
                description: null
                nsfw: 0
                endpoint: null
                count: 3066
                lcount: 2723
        success-no-data:
          status: 200
          message: found
          data:
            title: タグ
            count: 0
            current: 1
            pages: 1
            contents: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - contents
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
            current:
              type: integer
            pages:
              type: integer
            contents:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/TagStruct'
      required:
        - status
        - message
        - data
      title: GetCatalogTagResponse
    GetCatalogUploaderResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: found
          data:
            title: 投稿者
            count: 1
            current: 1
            pages: 1
            contents:
              - id: 1
                name: お窓
                count: 1
                lcount: 1204
        success-no-data:
          status: 200
          message: found
          data:
            title: 投稿者
            count: 0
            current: 1
            pages: 1
            contents: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - contents
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
            current:
              type: integer
            pages:
              type: integer
            contents:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/UploaderStruct'
      required:
        - status
        - message
        - data
      title: GetCatalogUploaderResponse
    GetCatalogCharacterResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: found
          data:
            title: キャラ
            count: 1
            current: 1
            pages: 1
            contents:
              - id: 2
                name: パソコン
                description: null
                nsfw: 0
                count: 1
                lcount: 53
        success-no-data:
          status: 200
          message: found
          data:
            title: キャラ
            count: 0
            current: 1
            pages: 1
            contents: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - contents
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
            current:
              type: integer
            pages:
              type: integer
            contents:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/TagStruct'
      required:
        - status
        - message
        - data
      title: GetCatalogCharacterResponse
    UploaderStruct:
      title: UploaderStruct
      type: object
      description: ''
      properties:
        id:
          type: integer
        name:
          type: string
        count:
          type: integer
        lcount:
          type: integer
    GetMylistResponse:
      title: GetMylistResponse
      type: object
      description: ''
      x-examples:
        success:
          status: 200
          message: ok
          data:
            title: Testのマイリスト
            count: 1
            current: 1
            pages: 1
            imgs:
              - illustID: 7
                artistID: 4
                title: clear glass cup with tea near brown ceramic teapot
                caption: ''
                date: '2021-01-07 15:15:28'
                pages: 1
                like: 1
                mylist: 1
                mylisted: true
                originUrl: 'https://unsplash.com/photos/L82-kkEBOd0?page=1'
                originService: 独自
                nsfw: false
                artist:
                  id: 4
                  name: Manki Kim
                extension: jpg
        success-no-data:
          status: 200
          message: ok
          data:
            title: マイリスト
            count: 0
            current: 1
            pages: 1
            imgs: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - imgs
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
              minimum: 0
              default: 0
              example: 0
            current:
              type: integer
              minimum: 1
              example: 1
              default: 1
            pages:
              type: integer
              minimum: 1
              default: 1
              example: 1
            imgs:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/SearchResultStruct'
      required:
        - status
        - message
        - data
    GetNavigationGeneralResponse:
      title: GetNavigationGeneralResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            - name: ごちシコ
              id: 413
              count: 129
            - name: きゅんもふ
              id: 88
              count: 92
            - name: KS
              id: 146
              count: 86
            - name: りかたん☆
              id: 548
              count: 83
            - name: きよ蔵
              id: 71
              count: 80
      description: ''
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/NavigationResult'
      required:
        - status
        - message
    GetNewsResponse:
      title: GetNewsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            id: 3
            date: '2021-01-07 15:31:24'
            color: 0
            title: 記載中の画像について / About these arts
            body: これらの画像は素材配布としての意図はなく、サイトの機能検証の
        failed-not-found:
          status: 404
          message: The news was not found.
      description: ''
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        data:
          $ref: '#/components/schemas/NewsStruct'
      required:
        - status
        - message
    GetNewsListResponse:
      title: GetNewsListResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            - id: 3
              date: '2021-01-07 15:31:24'
              color: 0
              title: 記載中の画像について / About these arts
              body: これらの画像は素材配布としての意図はなく、サイトの機能検証の
        success-no-data:
          status: 200
          message: ok
          data: []
      description: ''
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/NewsStruct'
      required:
        - status
        - message
    GetSearchGeneralResponse:
      description: ''
      type: object
      title: GetSearchGeneralResponse
      x-examples:
        success:
          status: 200
          message: found
          data:
            title: ティーカップ
            count: 2
            current: 1
            pages: 1
            imgs:
              - illustID: 8
                artistID: 5
                title: tea pours into white teacup photo
                caption: ''
                date: '2021-01-07 15:16:58'
                pages: 1
                like: 1
                mylist: 0
                mylisted: false
                originUrl: 'https://unsplash.com/photos/oBoELXgJR1w?page=1'
                originService: 独自
                nsfw: false
                artist:
                  id: 5
                  name: CHI CHEN
                extension: jpg
              - illustID: 7
                artistID: 4
                title: clear glass cup with tea near brown ceramic teapot
                caption: ''
                date: '2021-01-07 15:15:28'
                pages: 1
                like: 1
                mylist: 1
                mylisted: true
                originUrl: 'https://unsplash.com/photos/L82-kkEBOd0?page=1'
                originService: 独自
                nsfw: false
                artist:
                  id: 4
                  name: Manki Kim
                extension: jpg
      properties:
        status:
          type: integer
          format: int32
          default: 200
          example: 200
          minimum: 100
          maximum: 999
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - imgs
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
            current:
              type: integer
            pages:
              type: integer
            imgs:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/SearchResultStruct'
      required:
        - status
        - message
        - data
    GetMylistListResponse:
      description: ''
      type: object
      title: GetMylistListResponse
      x-examples:
        success-default:
          status: 200
          message: ok
          data:
            title: マイリスト一覧
            count: 2
            current: 1
            pages: 1
            contents:
              - id: 1
                name: お窓のマイリスト
                description: ユーザーデフォルトマイリスト
                createdDate: '2021/03/14 02:16:03'
                updatedDate: '2021/03/14 02:16:03'
                private: true
        success-multiple:
          status: 200
          message: ok
          data:
            title: マイリスト一覧
            count: 2
            current: 1
            pages: 1
            contents:
              - id: 1
                name: お窓のマイリスト
                description: ユーザーデフォルトマイリスト
                createdDate: '2021/03/14 02:16:03'
                updatedDate: '2021/03/14 02:16:03'
                private: true
              - id: 2
                name: お窓のチノリスト
                description: だいすき香風智乃
                createdDate: '2021/03/14 02:16:03'
                updatedDate: '2021/03/14 02:16:03'
                private: false
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - title
            - count
            - current
            - pages
            - contents
          properties:
            title:
              type: string
              minLength: 1
            count:
              type: integer
              example: 1
              default: 1
              minimum: 1
            current:
              type: integer
              default: 1
              example: 1
              minimum: 1
              maximum: 1
              enum:
                - 1
            pages:
              type: integer
              example: 1
              minimum: 1
              maximum: 1
              default: 1
              enum:
                - 1
            contents:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                $ref: '#/components/schemas/MylistStruct'
      required:
        - status
        - message
        - data
    PostSearchByImageRequest:
      title: PostSearchByImageRequest
      type: object
      properties:
        file:
          type: string
          format: binary
          description: 画像ファイル(binary)
      required:
        - file
    PostSearchByImageResponse:
      title: PostSearchByImageResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            hash: string
            illusts:
              - illustID: 0
                artistID: 0
                title: string
                caption: string
                date: '2021-01-07 12:48:42'
                pages: 0
                like: 0
                mylist: 0
                mylisted: true
                originUrl: string
                originService: string
                nsfw: true
                artist:
                  name: string
                  id: 0
                extension: png
                similarity: 0
        success-no-data:
          status: 200
          message: ok
          data:
            hash: string
            illusts: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - hash
            - illusts
          properties:
            hash:
              type: string
            illusts:
              type: array
              items:
                $ref: '#/components/schemas/SearchResultStruct'
      required:
        - status
        - message
        - data
    PostSearchByImageAtSauceNaoResponse:
      description: ''
      type: object
      x-examples:
        example-1:
          status: 200
          message: ok
          data:
            result:
              - header:
                  similarity: '77.83'
                  thumbnail: 'https://img3.saucenao.com/booru/3/a/3ab0ed13bd3ec3a8622382a240db3b74_1.jpg?auth=Tu4qnVHPxVwiXxVzMoJhWw&exp=1615921200'
                  index_id: 12
                  index_name: 'Index #12: Yande.re - 3ab0ed13bd3ec3a8622382a240db3b74_1.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://yande.re/post/show/647138'
                  yandere_id: 647138
                  creator: azumi kazuki
                  material: ''
                  characters: ''
                  source: '(C98) [Come Through (Adumi Kazuki)] Honey Sweet'
              - header:
                  similarity: '95.17'
                  thumbnail: 'https://img3.saucenao.com/booru/b/c/bca7ec8627098a725c1ec1c33effc352_0.jpg?auth=r3KiiJle_Y6fdX2Bhh268Q&exp=1615921200'
                  index_id: 9
                  index_name: 'Index #9: Danbooru - bca7ec8627098a725c1ec1c33effc352_0.jpg'
                  dupes: 1
                data:
                  ext_urls:
                    - 'https://danbooru.donmai.us/post/show/3890236'
                    - 'https://gelbooru.com/index.php?page=post&s=view&id=5273065'
                  danbooru_id: 3890236
                  gelbooru_id: 5273065
                  creator: azumi kazuki
                  material: 'clockwork rabbit, gochuumon wa usagi desu ka?'
                  characters: 'kafuu chino, tippy (gochiusa)'
                  source: 'https://twitter.com/kazukiadumi/status/1256528892409470976'
              - header:
                  similarity: '77.99'
                  thumbnail: 'https://img3.saucenao.com/ehentai/35/5a/355a28ea90722d3152d2b77da5ad73160ca7f41c.jpg?auth=oewNFWX4UIC3tRM2Z3m2lQ&exp=1615921200'
                  index_id: 38
                  index_name: 'Index #38: H-Misc (E-Hentai) - 355a28ea90722d3152d2b77da5ad73160ca7f41c.jpg'
                  dupes: 1
                data:
                  source: Honey Sweet
                  creator:
                    - adumi kazuki
                    - come through
                  eng_name: '[Come Through (Adumi Kazuki)] Honey Sweet'
                  jp_name: '[Come Through (あづみ一樹)] Honey Sweet'
              - header:
                  similarity: '51.24'
                  thumbnail: 'https://img1.saucenao.com/res/pixiv/8571/manga/85711213_p2.jpg?auth=8Acmlg43E4OKbzO1ulq-nw&exp=1615921200'
                  index_id: 5
                  index_name: 'Index #5: Pixiv Images - 85711213_p2.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://www.pixiv.net/member_illust.php?mode=medium&illust_id=85711213'
                  title: まとめ
                  pixiv_id: 85711213
                  member_name: みずみず子
                  member_id: 7955474
              - header:
                  similarity: '50.74'
                  thumbnail: 'https://img1.saucenao.com/res/nhentai/32697%20%28142225%29%20--%20%5BHirose%20Miho%5D%20Oneesan%20to%20Issho/119.jpg?auth=ez1hhJY60BbS-3Ge7xl4CQ&exp=1615921200'
                  index_id: 18
                  index_name: 'Index #18: H-Misc (nhentai) - 119.jpg'
                  dupes: 1
                data:
                  source: Oneesan to Issho
                  creator:
                    - hidiri rei
                    - hirose miho
                  eng_name: '[Hirose Miho] Oneesan to Issho'
                  jp_name: '[ひろせみほ] おねえさんといっしょ'
              - header:
                  similarity: '50.6'
                  thumbnail: 'https://img3.saucenao.com/furaffinity/1336/13361739.jpg?auth=QGLqamng93PFvd-UPObysw&exp=1615921200'
                  index_id: 40
                  index_name: 'Index #40: FurAffinity - 13361739.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://www.furaffinity.net/view/13361739'
                  title: Nurse Aras to the Rescue
                  fa_id: 13361739
                  author_name: KuroiNekoMiko
                  author_url: 'https://www.furaffinity.net/user/kuroinekomiko'
              - header:
                  similarity: '50.48'
                  thumbnail: 'https://img1.saucenao.com/res/mangadex/824/824357/R15.jpg?auth=RFr2ldvSaiFIIxiII821-A&exp=1615921200'
                  index_id: 37
                  index_name: 'Index #37: MangaDex - R15.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://mangadex.org/chapter/824357/'
                    - 'https://www.mangaupdates.com/series.html?id=371'
                    - 'https://myanimelist.net/manga/1439/'
                  md_id: 824357
                  mu_id: 371
                  mal_id: 1439
                  source: Sex Pistols
                  part: ' - Chapter 30'
                  artist: KOTOBUKI Tarako
                  author: KOTOBUKI Tarako
              - header:
                  similarity: '50.2'
                  thumbnail: 'https://img1.saucenao.com/res/pixiv/7858/manga/78582114_p9.jpg?auth=NxnkYsm8LdvXpgqcC08qbQ&exp=1615921200'
                  index_id: 5
                  index_name: 'Index #5: Pixiv Images - 78582114_p9.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://www.pixiv.net/member_illust.php?mode=medium&illust_id=78582114'
                  title: 期間限定Web投稿（12/31まで）
                  pixiv_id: 78582114
                  member_name: 長谷川
                  member_id: 7961579
              - header:
                  similarity: '49.70'
                  thumbnail: 'https://img1.saucenao.com/res/pixiv/2030/manga/20309973_p2.jpg?auth=goBwjyvoTMaPAvGy3KNmqQ&exp=1615921200'
                  index_id: 5
                  index_name: 'Index #5: Pixiv Images - 20309973_p2.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://www.pixiv.net/member_illust.php?mode=medium&illust_id=20309973'
                  title: 忍者じゃなイカ？　～多勢に無勢～
                  pixiv_id: 20309973
                  member_name: shen
                  member_id: 1172007
              - header:
                  similarity: '49.68'
                  thumbnail: 'https://img1.saucenao.com/res/pixiv/5400/manga/54003307_p5.jpg?auth=eBHYI20wET5PE8fNw8ftPw&exp=1615921200'
                  index_id: 5
                  index_name: 'Index #5: Pixiv Images - 54003307_p5.jpg'
                  dupes: 0
                data:
                  ext_urls:
                    - 'https://www.pixiv.net/member_illust.php?mode=medium&illust_id=54003307'
                  title: 出轟+αまとめ3/再販のお知らせ
                  pixiv_id: 54003307
                  member_name: くろい
                  member_id: 3807881
      properties:
        status:
          type: integer
          example: 200
          default: 200
          maximum: 999
          minimum: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          properties:
            result:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      similarity:
                        type: string
                        minLength: 1
                        description: 類似度(100.00~0.00までのfloatを文字列にしたもの)
                      thumbnail:
                        type: string
                        minLength: 1
                        description: サムネイル画像(直アクセス可能)
                      index_id:
                        type: integer
                        description: 参照したデータベースID
                      index_name:
                        type: string
                        minLength: 1
                        description: 参照したデータベース名
                      dupes:
                        type: integer
                    required:
                      - similarity
                      - thumbnail
                      - index_id
                      - index_name
                      - dupes
                  data:
                    type: object
                    description: 参照したDBによる異なる追加データ
                    properties:
                      ext_urls:
                        type: array
                        description: 出典URL(出せる場合)
                        items:
                          type: object
                      yandere_id:
                        type: integer
                      creator:
                        type: string
                        minLength: 1
                      material:
                        type: string
                      characters:
                        type: string
                      source:
                        type: string
                        minLength: 1
                required:
                  - data
      required:
        - status
        - message
      title: PostSearchByImageAtSauceNaoResponse
    PostCharacterResponse:
      title: PostCharacterResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          tagID: 1
        failed-not-satisfied:
          status: 400
          message: The parameters were not satisfied.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-conflict:
          status: 409
          message: The specified tag already exists.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        tagID:
          type: integer
      required:
        - status
        - message
    PostTagResponse:
      title: PostTagResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          tagID: 1
        failed-not-satisfied:
          status: 400
          message: The parameters were not satisfied.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-conflict:
          status: 409
          message: The specified tag already exists.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        tagID:
          type: integer
      required:
        - status
        - message
    PostWikiArticleResponse:
      title: PostWikiArticleResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          articleID: 1
        failed-not-satisfied:
          status: 400
          message: The parameters were not satisfied.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-conflict:
          status: 409
          message: The specified article already exists.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        articleID:
          type: integer
      required:
        - status
        - message
    GetCharacterResponse:
      title: GetCharacterResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          character:
            id: 1
            name: 香風智乃
            nsfw: false
            description: かわいい女の子
            count: 1
            lcount: 1204
        failed-not-found:
          status: 404
          message: The character was not found.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        character:
          $ref: '#/components/schemas/TagStruct'
      required:
        - status
        - message
    PutCharacterResponse:
      title: PutCharacterResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Updated
        failed-already-exists:
          status: 200
          message: The specifed name already exists.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    CharacterStruct:
      title: CharacterStruct
      type: object
      properties:
        charaName:
          type: string
          description: キャラクター名
        charaDescription:
          type: string
          description: キャラクター説明文
    DeleteCharacterResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Deleted.
        failed-not-found:
          status: 404
          message: The character was not found.
        failed-locked:
          status: 409
          message: The tag is referenced by art.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      title: DeleteTagResponse
      properties:
        status:
          type: integer
          example: 200
          default: 200
          minimum: 100
          maximum: 999
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteTagResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Deleted.
        failed-not-found:
          status: 404
          message: The tag was not found.
        failed-locked:
          status: 409
          message: The tag is referenced by art.
        failed-permission:
          status: 400
          message: You don't have enough permisison.
      title: DeleteTagResponse
      properties:
        status:
          type: integer
          example: 200
          default: 200
          format: int32
          minimum: 100
          maximum: 999
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostInviteResponse:
      title: PostInviteResponse
      type: object
      description: ''
      x-examples:
        success:
          status: 200
          message: ok
          data:
            id: 1
            code: KAFUUCHINO
        failed-exists:
          status: 400
          message: Multiple invitation is not allowed for now.
        failed-conflict:
          status: 409
          message: 'Sorry, your request conflicted. Try again later.'
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          properties:
            id:
              type: integer
              description: サイト内通し招待番号
            code:
              type: string
              description: 招待コード
      required:
        - status
        - message
    DeleteInviteResponse:
      title: DeleteInviteResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteInviteRequest:
      title: DeleteInviteRequest
      type: object
      description: ''
      properties:
        code:
          type: string
          description: 管理者の場合は招待コードを指定することで一括で無効化できます
      x-examples:
        example:
          code: KAFUUCHINO
    PostInviteRequest:
      title: PostInviteRequest
      type: object
      description: (管理者のみ利用可能)
      x-examples:
        example:
          code: KAFUUCHINO
          count: 10
      properties:
        count:
          type: integer
          description: 作成するコード数
        code:
          type: string
          description: 発行したい招待コード
    GetMutesResponse:
      title: GetMutesResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            tag:
              - 1
              - 2
              - 3
            artist:
              - 1
              - 2
              - 3
        success-no-data:
          status: 200
          message: ok
          data:
            tag: []
            artist: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          example: 200
          default: 200
        message:
          type: string
          minLength: 1
        data:
          type: object
          required:
            - tag
            - artist
          properties:
            tag:
              type: array
              description: ミュート中のタグID配列
              items:
                type: integer
            artist:
              type: array
              description: ミュート中の絵師ID配列
              items:
                type: integer
      required:
        - status
        - message
        - data
    PostMuteRequest:
      title: PostMuteRequest
      type: object
      properties:
        type:
          type: integer
          enum:
            - 1
            - 2
          example: 1
          minimum: 1
          maximum: 2
          description: 'ミュート種別 1:タグ 2:絵師'
        id:
          description: 対象のID
          type: integer
    PostMuteResponse:
      title: PostMuteResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Added.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-exists:
          status: 400
          message: The mute is already exists.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteMuteRequest:
      title: DeleteMuteRequest
      type: object
      x-examples:
        example:
          type: 1
          id: 1
      properties:
        type:
          type: integer
          enum:
            - 1
            - 2
          example: 1
          minimum: 1
          maximum: 2
          description: 'ミュート種別 1:タグ 2:絵師'
        id:
          type: integer
          description: 対象のID
          minimum: 1
      required:
        - type
        - id
    DeleteMuteResponse:
      title: DeleteMuteResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Removed.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-not-exists:
          status: 400
          message: The mute was not found.
        failed-internal-error:
          status: 500
          message: Server bombed.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostMylistRequest:
      title: PostMylistRequest
      type: object
      description: ''
      x-examples:
        example:
          name: 外出香風智乃
          description: ラビハ以外で活躍するアクティブな香風智乃まとめ
      properties:
        name:
          type: string
          description: マイリスト名
        description:
          type: string
          description: マイリスト説明文
        private:
          type: boolean
          description: 公開か非公開か
          default: true
      required:
        - name
        - description
        - private
    PostMylistResponse:
      title: CreateMylistResponse
      type: object
      x-examples:
        success-created:
          status: 201
          message: Created
          mylistID: 1
        failed-bombed:
          status: 500
          message: Server bombed
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-exists:
          status: 409
          message: The name is already used.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-too-many:
          status: 400
          message: 'You have too many mylists, delete one and try again.'
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          default: 200
          example: 200
          format: int32
        message:
          type: string
        mylistID:
          type: integer
          description: 作成に成功した場合はいるマイリストID
      required:
        - status
        - message
    PutMylistRequest:
      title: PutMylistRequest
      type: object
      description: ''
      x-examples:
        example:
          title: 外出香風智乃
          description: 外で活躍する香風智乃まとめ
          action: add
          illustID: 1
      properties:
        title:
          type: string
          description: マイリストのタイトルを編集する場合
        description:
          type: string
          description: マイリストの説明文を編集する場合
        action:
          type: string
          enum:
            - add
            - remove
          default: add
          example: add
          description: イラストを追加/削除する場合指定
        illustID:
          type: integer
          description: 追加または削除したいイラストID
        private:
          type: boolean
          description: 公開/非公開
    PutMylistResponse:
      title: PutMylistResponse
      type: object
      x-examples:
        success-created:
          status: 200
          message: Update complete.
        failed-bombed:
          status: 500
          message: Server bombed.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-exists:
          status: 400
          message: Already added to the list.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-not-admin:
          status: 400
          message: You don't have permission to edit.
        failed-not-exists:
          status: 400
          message: Already deleted from the list.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    MylistStruct:
      title: MylistStruct
      type: object
      x-examples:
        example:
          id: 1
          name: お窓のマイリスト
          description: ユーザーデフォルトマイリスト
          createdDate: '2021/03/14 02:16:03'
          updatedDate: '2021/03/14 02:16:03'
          private: true
      properties:
        id:
          type: integer
          description: マイリストID
        name:
          type: string
          description: マイリスト名
        description:
          type: string
          description: マイリスト説明文
        createdDate:
          type: string
          description: マイリスト作成日時
          minLength: 19
          maxLength: 19
        updatedDate:
          type: string
          description: マイリスト更新日時
          minLength: 19
          maxLength: 19
        private:
          type: boolean
          description: 公開/非公開
          default: true
      required:
        - id
        - name
        - description
        - createdDate
        - updatedDate
        - private
    PostMylistFindsRequest:
      title: PostMylistFindsRequest
      type: object
      properties:
        id:
          description: 探したいイラストID
          type: array
          items:
            type: integer
      x-examples:
        example-1:
          id:
            - 1
            - 2
            - 3
    PostMylistFindsResponse:
      title: PostMylistFindsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            '1': true
            '2': false
            '3': true
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-not-exists:
          status: 404
          message: The mylist was not exists.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          additionalProperties:
            type: string
            description: 指定されたイラストIDをキーとして、それぞれ存在するかのboolean
      required:
        - status
        - message
    PostNewsRequest:
      title: PostNewsRequest
      type: object
      x-examples:
        example:
          title: 香風智乃がかわいい
          body: そーんなのー常識ー
          color: 1
      properties:
        title:
          type: string
          description: ニュースのタイトル
          minLength: 1
          maxLength: 50
        body:
          type: string
          description: ニュースの本文(Markdown)
          minLength: 1
          maxLength: 5000
        color:
          type: integer
          minimum: 1
          maximum: 9
          example: 1
          description: ニュースの表示カラー/種別
      required:
        - title
        - body
        - color
    PostNewsResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 201
          message: Created.
          newsID: 1
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-params:
          status: 400
          message: Request parameter is invalid.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      title: PostNewsResponse
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        newsID:
          type: integer
      required:
        - status
        - message
    PutNewsRequest:
      title: PutNewsRequest
      type: object
      x-examples:
        example:
          title: 香風智乃がかわいい
          body: そーんなのー常識ー
          color: 1
          date: '2020/03/15 09:11:00'
      properties:
        title:
          type: string
          description: ニュースのタイトル
          minLength: 1
          maxLength: 50
        body:
          type: string
          description: ニュースの本文(Markdown)
          minLength: 1
          maxLength: 5000
        color:
          type: integer
          minimum: 1
          maximum: 9
          example: 1
          description: ニュースの表示カラー/種別
        date:
          type: string
          description: 登録日付時刻
          minLength: 19
          maxLength: 19
    PutNewsResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Updated.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-params:
          status: 400
          message: Request parameter is invalid.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      title: PutNewsResponse
      properties:
        status:
          type: integer
          maximum: 999
          minimum: 100
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteNewsResponse:
      title: DeleteNewsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-permission:
          status: 400
          message: You don't have enough permission.
        failed-not-found:
          status: 404
          message: The news was not found.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetNotifyClientsResponse:
      title: GetNotifyClientsResponse
      type: object
      x-examples:
        success-exists:
          status: 200
          message: ok
          clients:
            - id: 1
              name: ChinoLaptop
              type: 0
            - id: 2
              name: ChinoPhone
              type: 0
        success-not-exists:
          status: 200
          message: ok
          clients: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        clients:
          type: array
          items:
            $ref: '#/components/schemas/NotifyClientStruct'
      required:
        - status
        - message
    NotifyClientStruct:
      title: NotifyClientStruct
      type: object
      properties:
        id:
          type: integer
          description: 通知クライアントID
          minimum: 1
        name:
          type: string
          description: ユーザーが指定した通知クライアント名
        type:
          type: integer
          description: 'クライアント種別 0:WebPush 1:LineNotify'
          minimum: 0
          maximum: 9
          example: 0
          default: 0
        level:
          type: integer
          minimum: 1
          maximum: 9
          description: '通知レベル 1:緊急時のみ 5:タグ絵師通知のみ 9:すべて'
      required:
        - id
        - name
        - type
        - level
      description: ''
    PostRegisterWebPushRequest:
      title: PostRegisterWebPushRequest
      type: object
      properties:
        endpoint:
          type: string
          description: WebPushのPOST先エンドポイント(ユーザー毎に異なる)
        p256dh:
          type: string
          description: ブラウザ公開鍵
        auth:
          type: string
          description: WebPushの通知送信認証キー
        name:
          type: string
          description: 通知クライアント名
        level:
          type: number
      required:
        - endpoint
        - p256dh
        - auth
        - name
        - level
    PostRegisterWebPushResponse:
      title: PostRegisterWebPushResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          id: 1
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        id:
          type: integer
          description: クライアントID
          minimum: 1
      required:
        - status
        - message
    DeleteNotifyClientResponse:
      title: DeleteNotifyClientResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-not-found:
          status: 404
          message: The notify client was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          description: ''
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetNotifyClientResponse:
      title: GetNotifyClientResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          client:
            id: 1
            name: Chino laptop
            type: 0
            level: 1
        failed-not-found:
          status: 404
          message: The notify client was not found.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          default: 200
          example: 200
        message:
          type: string
          minLength: 1
        client:
          $ref: '#/components/schemas/NotifyClientStruct'
      required:
        - status
        - message
    PostRegisterLineNotifyRequest:
      title: PostRegisterLineNotifyRequest
      type: object
      properties:
        token:
          type: string
          description: LineNotifyのパーソナルトークン
        name:
          type: string
          description: 通知クライアント名
        level:
          type: integer
          description: '通知レベル 1:緊急時のみ 5:タグ絵師通知のみ 9:すべて'
          enum:
            - 1
            - 5
            - 9
          example: 9
          default: 9
          minimum: 1
          maximum: 9
      required:
        - token
        - name
        - level
    PostRegisterLineNotifyResponse:
      title: PostRegisterLineNotifyResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          id: 2
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        id:
          type: integer
          description: クライアントID
          minimum: 1
      required:
        - status
        - message
    GetNotifyConditionsResponse:
      title: GetNotifyConditionsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          conditions:
            - type: 1
              id: 1
              method: 1
        success-no-data:
          status: 200
          message: ok
          conditions: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/NotifyConditionStruct'
      required:
        - status
        - message
    NotifyConditionStruct:
      title: NotifyConditionStruct
      type: object
      properties:
        type:
          type: integer
          description: '条件種別 0:全通知 1:タグ 2:絵師'
        id:
          type: integer
          description: 条件ID 全通知なら0/タグID/絵師ID
        method:
          type: integer
          description: '通知方法 0:両方 1:Web 2:Line'
    PostNotifyConditionRequest:
      title: PostNotifyConditionRequest
      type: object
      properties:
        type:
          type: integer
          description: '条件種別 0:全通知 1:タグ 2:絵師'
        id:
          type: integer
          description: 全てなら0/対象タグID/対象絵師ID
        method:
          type: integer
          description: '通知方法 0:両方 1:Web 2:Line'
      required:
        - type
        - id
        - method
    PostNotifyConditionResponse:
      title: PostNotifyConditionResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          conditionID: 1
        failed-params:
          status: 400
          message: Request parameters are not satisfied.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-too-many:
          status: 400
          message: 'You have too many notify conditions. Remove one, and try again.'
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        conditionID:
          type: integer
          description: 通知条件ID
      required:
        - status
        - message
    PutNotifyConditionResponse:
      title: PutNotifyConditionResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Updated.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-not-found:
          status: 404
          message: The notify condition was not found.
        failed-not-satisfied:
          status: 400
          message: Request parameters are not satisfied.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          example: 200
          default: 200
          format: int32
          minimum: 100
          maximum: 999
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    DeleteNotifyConditionResponse:
      title: DeleteNotifyConditionResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed-not-found:
          status: 404
          message: The notify condition was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          description: ''
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetNotifyConditionResponse:
      title: GetNotifyConditionResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          condition:
            type: 1
            id: 1
            method: 1
        failed-not-found:
          status: 400
          message: The notify condition was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        condition:
          $ref: '#/components/schemas/NotifyConditionStruct'
      required:
        - status
        - message
    PostReportGeneralResponse:
      title: ReportGeneralResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Report succeed.
        failed-already-reported:
          status: 400
          message: You already reported.
        failed-not-found:
          status: 404
          message: The target was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          format: int32
          example: 200
          default: 200
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostReportGeneralRequest:
      title: ReportGeneralRequest
      type: object
      x-examples:
        example-1:
          type: 1
          msg: XSSしようとしてる人が居るみたいです、なんとかしてください
        example-2:
          type: 2
          msg: どうみてもエッチですあーいけません!
        example-3:
          type: 3
          msg: 完全に同一の画像を上げ続け、運営を妨害している人が居ます
        example-4:
          type: 4
          msg: DMCA Request
      properties:
        type:
          type: integer
          description: '通報種別 1:不適切名称 2:不適切年齢 3:規約違反 4:法律違反'
          minimum: 1
          maximum: 9
          format: int32
          example: 1
          default: 1
        msg:
          type: string
          description: 通報本文
          minLength: 1
      required:
        - type
        - msg
    ScrapeResultStruct:
      title: ScrapeResultStruct
      type: object
      description: スクレイピング結果
      x-examples:
        twitter:
          illust:
            type: twitter
            id: 1368965591470547000
            title: 'ラ〇ッドハウスの店員さん '
            caption: 'ラ〇ッドハウスの店員さん '
            imgs:
              - width: 1159
                height: 1577
                large_src: 'https://pbs.twimg.com/media/Ev-K11BVoAktP3d.jpg?format=jpg&name=orig'
                thumb_src: 'https://pbs.twimg.com/media/Ev-K11BVoAktP3d.jpg?format=jpg&name=thumb'
            tags: []
            source: 'https://twitter.com/PURA1192/status/1368965591470546949'
            artist: きゅーぷら
            R18: false
          extra:
            twitter_user:
              id: 1176867370238800000
              screen_name: PURA1192
              name: きゅーぷら
              description: |-
                オメガウェポン

                https://t.co/sffwGeETPk
              profile_image: 'https://pbs.twimg.com/profile_images/1362206358922092549/uWD9eZId_normal.jpg'
              banner_image: 'https://pbs.twimg.com/profile_banners/1176867370238799872/1611142275'
      properties:
        illust:
          type: object
          description: 投稿に必須となるデータ
          properties:
            type:
              type: string
              description: スクレイプ元のサイト名(英語で短く表現)
            id:
              description: 外部サイト内でのイラストID
              type: integer
            title:
              type: string
              description: 作品タイトル
            caption:
              type: string
              description: 作品説明文
            imgs:
              type: array
              items:
                type: object
                properties:
                  width:
                    description: 画像の横幅(取得できる場合)
                    type: integer
                  height:
                    type: integer
                    description: 縦幅(取得できる場合)
                  large_src:
                    type: string
                    description: 実際に保存される画像へのURL(取得できる場合)
                    format: uri-reference
                    example: 'https://example.com/hoge'
                  thumb_src:
                    type: string
                    description: サムネイル画像へのURL
                required:
                  - thumb_src
            tags:
              type: array
              description: 取得したサイト内で指定されていたタグ
              items:
                type: string
            source:
              type: string
              description: 取得したURLの正規URL
            artist:
              description: 絵師の名前
              type: object
              required:
                - source
                - name
                - id
              properties:
                source:
                  type: string
                  description: 絵師ページへの直URL
                name:
                  type: string
                  description: 絵師の名前
                id:
                  type: string
                  description: 絵師のID
            R18:
              type: boolean
              description: アダルトコンテンツか否か
          required:
            - type
            - id
            - title
            - caption
            - imgs
            - tags
            - source
            - artist
            - R18
        extra:
          type: object
          description: 投稿に必須ではない追加データ(他で再利用できるように)
          properties:
            booth_shop:
              type: object
              description: Boothのショップ型
              properties:
                name:
                  type: string
                link:
                  type: string
            twitter_user:
              type: object
              description: Twitterのユーザー型
              properties:
                id:
                  type: integer
                screen_name:
                  type: string
                name:
                  type: string
                description:
                  type: string
                profile_image:
                  type: string
                banner_image:
                  type: string
            danbooru_user:
              type: object
              description: Danbooruのユーザー型
              properties:
                id:
                  type: integer
                  description: ユーザーID
                name:
                  type: string
                  description: ユーザー名
            pixiv_user:
              type: object
              description: Pixivのユーザー型
              properties:
                id:
                  type: integer
                  description: ユーザーID(整数値)
                name:
                  type: string
                  description: ユーザー名
                description:
                  type: string
                  description: 説明文
                profile_image:
                  type: string
                  description: アバター画像
                banner_image:
                  type: string
                  description: バナー画像
            nicoseiga_user:
              type: object
              description: ニコニコ静画のユーザー型
              properties:
                id:
                  type: integer
                  description: ユーザーID
                name:
                  type: string
                  description: ユーザー名
                profile_image:
                  type: string
                  description: プロフィール画像
    PostScrapeRequest:
      title: PostScrapeRequest
      type: object
      properties:
        url:
          type: string
          description: スクレイピングするURL
      required:
        - url
      x-examples:
        twitter:
          url: 'https://twitter.com/mozukun43/status/1369660632409153537'
        pixiv:
          url: 'https://www.pixiv.net/artworks/87348005'
        danbooru:
          url: 'https://danbooru.donmai.us/posts/4359777'
        nicoseiga:
          url: 'https://seiga.nicovideo.jp/seiga/im10677929'
        booth:
          url: 'https://booth.pm/ja/items/2500039'
        booth2:
          url: 'https://picupdoll.booth.pm/items/2500039'
    PostScrapeResponse:
      title: PostScrapeResponse
      type: object
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        data:
          $ref: '#/components/schemas/ScrapeResultStruct'
      required:
        - status
        - message
      x-examples:
        success-twitter:
          status: 200
          message: ok
          data:
            illust:
              type: twitter
              id: 1369660632409153500
              title: 不機嫌チノちゃん
              caption: 不機嫌チノちゃん
              imgs:
                - width: 965
                  height: 1160
                  large_src: 'https://pbs.twimg.com/media/EwIDEmRXIAEHEju?format=jpg&name=orig'
                  thumb_src: 'https://pbs.twimg.com/media/EwIDEmRXIAEHEju?format=jpg&name=thumb'
              tags:
                - ごちうさ
              source: 'https://twitter.com/mozukun43/status/1369660632409153537'
              artist:
                name: もくず
                id: mozukun43
                source: 'https://twitter.com/mozukun43'
              R18: true
            extra:
              twitter_user:
                id: 0
                screen_name: mozukun43
                name: もくず
                description: 'ジャンル雑多(ごちうさ多め)。本業も趣味も絵を描いて生きています。アルバカレーに生かされてます。旅客機が好きです。女の子と食べ物を描くことが多いです。だいたい健全。返信はのんびり 2/14〜体調不良でちょっと更新頻度低めです fanbox▷http://mozukun43.fanbox.cc'
                profile_image: 'https://pbs.twimg.com/profile_images/1314875319791177728/HZtotQN-_400x400.jpg'
                banner_image: 'https://pbs.twimg.com/profile_banners/1018545218776207361/1603160166/1500x500'
        success-pixiv:
          status: 200
          message: ok
          data:
            illust:
              type: pixiv
              id: 87348005
              title: "チノ「もぅ\U0001F495・・・見ないでください///・・」"
              caption: ''
              imgs:
                - width: 900
                  height: 1432
                  large_src: 'https://i.pximg.net/img-original/img/2021/01/28/00/02/31/87348005_p0.jpg'
                  thumb_src: 'https://api.gochiusa.team/temp/hoge.jpg'
              tags:
                - 香風智乃
                - パンチラ
                - 風チラ
                - セーラー服
              source: 'https://www.pixiv.net/artworks/87348005'
              artist:
                name: くまふり
                id: '62583422'
                source: 'https://www.pixiv.net/users/62583422'
              R18: false
            extra:
              pixiv_user:
                id: 62583422
                name: くまふり
                description: えっちな絵を中心に投稿していきます
                profile_image: 'https://i.pximg.net/user-profile/img/2020/12/12/22/23/41/19820326_fb09523b351d514c7ec4e7ae819e5502_170.jpg'
                banner_image: ''
        success-danbooru:
          status: 200
          message: ok
          data:
            illust:
              type: danbooru
              id: 4359777
              title: YESチョコくわえちゃうチノちゃん
              caption: 誰かさんに言われるがまま咥えてみたけど、意味分かってないチノちゃんのらくがき
              imgs:
                - width: 599
                  height: 687
                  large_src: 'https://danbooru.donmai.us/data/__kafuu_chino_gochuumon_wa_usagi_desu_ka_drawn_by_araki495__c12cdf2a0cbec190e15b64620caaffa6.png?download=1'
                  thumb_src: 'https://cdn.donmai.us/preview/c1/2c/c12cdf2a0cbec190e15b64620caaffa6.jpg'
              tags:
                - 1girl
                - '??'
                - araki495
                - bangs
                - blue_bow
                - blue_eyes
                - blue_hair
                - blue_vest
                - blush
                - bow
                - candy
                - chocolate
                - chocolate_heart
                - closed_mouth
                - collared_shirt
                - commentary_request
                - dress_shirt
                - eyebrows_visible_through_hair
                - food
                - food_in_mouth
                - gochuumon_wa_usagi_desu_ka?
                - hair_between_eyes
                - hair_ornament
                - hands_up
                - heart
                - holding
                - holding_food
                - kafuu_chino
                - long_hair
                - looking_at_viewer
                - puffy_short_sleeves
                - puffy_sleeves
                - rabbit_house_uniform
                - shirt
                - short_sleeves
                - solo
                - translated
                - uniform
                - upper_body
                - vest
                - waitress
                - white_shirt
                - x_hair_ornament
                - 'yes'
              source: 'https://danbooru.donmai.us/posts/4359777'
              artist:
                name: araki495
                id: araki495
                source: 'https://danbooru.donmai.us/posts?tags=araki495'
              R18: false
            extra:
              danbooru_user:
                id: 430030
                name: Unbreakable
        success-nicoseiga:
          status: 200
          message: ok
          data:
            illust:
              type: nicoseiga
              id: 10677929
              title: ナースチノちゃん
              caption: ''
              imgs:
                - width: 1750
                  height: 1684
                  large_src: 'https://lohas.nicoseiga.jp/priv/a9db9d0eb330004b69875ed94dcc3db96fadb6a0/1615764084/10677929'
                  thumb_src: 'https://lohas.nicoseiga.jp//thumb/10677929uz?1610798673'
              tags:
                - アニメ
                - ご注文はうさぎですか?
                - 香風智乃
              source: 'https://seiga.nicovideo.jp/seiga/im10677929'
              artist:
                name: Azel司令官
                id: '12038745'
                source: 'https://seiga.nicovideo.jp/user/illust/12038745'
              R18: false
            extra:
              nicoseiga_user:
                id: 12038745
                name: Azel司令官
                profile_image: 'https://secure-dcdn.cdn.nimg.jp/nicoaccount/usericon/1203/12038745.jpg?1572444258'
        success-booth:
          status: 200
          message: string
          data:
            illust:
              type: booth
              id: 2500039
              title: 'Pic Up Doll 33 Level:★★★★☆'
              caption: |-
                Pic Up Dollはペーパークラフト組立キットです 、差し込み式で設計、接着剤などは使用していません。お部屋の机や会社のデスクにちょこんと置くのも かわいいです、カメラやスマートフォンで撮影して楽しんでいただければと思います。また、大切な人へ の贈り物としてもオススメしています。サイズが小さいためパーツが小さくて、小さな子ども向けではな いようです。

                Level:★☆☆☆☆
                初級者にとって取り組みやすいグレードで、パーツも少なめです。

                Level:★★☆☆☆
                形の似ている部品や小さな部品が含まれているので注意してください。

                Level:★★★☆☆
                組み立てには時間を要するかもしれません。

                Level:★★★★☆
                細かさもパーツ数もハ イレベル、組み立ての難易度は5つ星に近いです。

                Level:★★★★★
                組み立ては非常に難しく、お手入れと忍耐が必要です。

                製作の所要時間は個人差があります、ゆっくりと丁寧に楽しみながら作って ください。工具の使い方やコツを知っておくだけで、Pic Up Dollの組み立てはぐっと楽になります。

                ※ 二次創作の元になっているキャラクターデザインや設定などの著作権は、原作者・版権元にあります。
              imgs:
                - width: 3001
                  height: 3000
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/dbb72dbe-3f16-4086-a354-94bfd2462dee.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/dbb72dbe-3f16-4086-a354-94bfd2462dee_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/13d31dc9-d7eb-4a42-9d92-5d7b16652f34.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/13d31dc9-d7eb-4a42-9d92-5d7b16652f34_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/ab6ae45f-ced8-4fb5-bc74-4d8d88284823.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/ab6ae45f-ced8-4fb5-bc74-4d8d88284823_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/e0837269-f593-4d24-b6f7-353da119e581.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/e0837269-f593-4d24-b6f7-353da119e581_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/94526010-c5d2-4ede-98d8-8abeed9e0165.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/94526010-c5d2-4ede-98d8-8abeed9e0165_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/abfafead-b6ad-4947-9d85-31b3894340d9.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/abfafead-b6ad-4947-9d85-31b3894340d9_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/fe2eaa2a-3da9-49a9-8230-a75e67650a67.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/fe2eaa2a-3da9-49a9-8230-a75e67650a67_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/dcd8f43b-77ee-475f-a7e0-46d1c8364aff.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/dcd8f43b-77ee-475f-a7e0-46d1c8364aff_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/18217e23-0ea8-43d0-8b5a-01783143d3d0.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/18217e23-0ea8-43d0-8b5a-01783143d3d0_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/20407936-3496-4db9-b693-bde929fc35c8.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/20407936-3496-4db9-b693-bde929fc35c8_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/2a51cd57-c485-42c0-b22a-76a5dc3e5ce0.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/2a51cd57-c485-42c0-b22a-76a5dc3e5ce0_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/3f13b558-1037-47f7-88fe-b70004437004.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/3f13b558-1037-47f7-88fe-b70004437004_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/aa66279a-f9e6-4664-b896-d944ab719ab6.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/aa66279a-f9e6-4664-b896-d944ab719ab6_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/e4d59aea-150e-4a87-be1d-dd08b14d3fed.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/e4d59aea-150e-4a87-be1d-dd08b14d3fed_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/598236b1-01d1-4b4f-8267-f036377b16d2.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/598236b1-01d1-4b4f-8267-f036377b16d2_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/4f4e31bb-3987-4316-b296-c606b4ba63fe.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/4f4e31bb-3987-4316-b296-c606b4ba63fe_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/cc054f57-a0e6-439a-8040-68592e17145d.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/cc054f57-a0e6-439a-8040-68592e17145d_base_resized.jpg'
                - width: 1080
                  height: 1080
                  large_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/c2c5259e-00d2-4b24-8e2a-d0f38cff58a0.jpg'
                  thumb_src: 'https://booth.pximg.net/5e7d554d-3111-4e62-9caa-5a2985236192/i/2500039/c2c5259e-00d2-4b24-8e2a-d0f38cff58a0_base_resized.jpg'
              tags:
                - ペーパークラフト
                - 香風智乃
                - ティッピー
                - おりがみ
                - ご注文はうさぎですか
                - ペーパートイ
              source: 'https://picupdoll.booth.pm/items/2500039'
              artist:
                name: Pic Up Doll
                id: picupdoll
                source: 'https://picupdoll.booth.pm/'
              R18: true
            extra:
              booth_shop:
                name: Pic Up Doll
                link: 'https://picupdoll.booth.pm'
                sns:
                  - 'https://www.pixiv.net/users/55242393'
                  - 'https://twitter.com/picupdoll/'
                  - 'https://www.instagram.com/PicUpDoll/'
                  - 'https://www.facebook.com/PicUpDoll'
        failed-not-found:
          status: 404
          message: Specified page was not found.
        failed-unsupported:
          status: 412
          message: Specified address is not supported.
    PostUploadRequest:
      title: PostUploadRequest
      type: object
      description: ''
      properties:
        file:
          type: string
          description: 投稿するファイル本体
          format: binary
      required:
        - file
    PostUploadResponse:
      title: PostUploadResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          url: 'https://example.com/hogehoge.jpg'
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          format: int32
          default: 200
        message:
          type: string
          minLength: 1
        url:
          description: 投稿したファイルのURL(有効期限は1時間とする)
          type: string
      required:
        - status
        - message
    PostSearchByImageAtAscii2dResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            url: 'https://ascii2d.net/search/color/e7e09e7cb091cc31ae12a67661e391d5'
            result:
              - hash: 379bf76fe1aeff3c4aff68404d717e59
                size: 1146x2048 JPEG 245.3KB
                thumbnail: /thumbnail/3/7/9/b/379bf76fe1aeff3c4aff68404d717e59.jpg
                title: 2020.04.24
                artist: Pizzzica
                urls:
                  source: 'https://twitter.com/Pizzzica/status/1253620903805505536'
                  artist: 'https://twitter.com/intent/user?user_id=1099287362570350592'
              - hash: 15e8b2af81e8451fd6852170f428d0f1
                size: twitter
                thumbnail: /thumbnail/1/5/e/8/15e8b2af81e8451fd6852170f428d0f1.jpg
                title: リプラビチノちゃん
                artist: ぴちかー
                urls:
                  source: 'https://www.pixiv.net/artworks/81029831'
                  artist: 'https://www.pixiv.net/users/38405227'
              - hash: 379bf76fe1aeff3c4aff68404d717e59
                size: 1146x2048 JPEG 245.3KB
                thumbnail: /thumbnail/3/7/9/b/379bf76fe1aeff3c4aff68404d717e59.jpg
                title: 2020.04.24
                artist: Pizzzica
                urls:
                  source: 'https://twitter.com/Pizzzica/status/1253620903805505536'
                  artist: 'https://twitter.com/intent/user?user_id=1099287362570350592'
              - hash: 15e8b2af81e8451fd6852170f428d0f1
                size: twitter
                thumbnail: /thumbnail/1/5/e/8/15e8b2af81e8451fd6852170f428d0f1.jpg
                title: リプラビチノちゃん
                artist: ぴちかー
                urls:
                  source: 'https://www.pixiv.net/artworks/81029831'
                  artist: 'https://www.pixiv.net/users/38405227'
              - hash: d382dcb19944b9d712cdca81c65f1d10
                size: 1944x3505 PNG 4837.4KB
                thumbnail: /thumbnail/d/3/8/2/d382dcb19944b9d712cdca81c65f1d10.jpg
                title: 銀高（お蔵出し）Log　R-18
                artist: なゆ子
                urls:
                  source: 'https://www.pixiv.net/artworks/55205947'
                  artist: 'https://www.pixiv.net/users/3696997'
              - hash: b4ee05347efd6c8041ce0444ba335af5
                size: 481x836 JPEG 306.6KB
                thumbnail: /thumbnail/b/4/e/e/b4ee05347efd6c8041ce0444ba335af5.jpg
                title: 2018.12.09
                artist: askh559
                urls:
                  source: 'https://twitter.com/askh559/status/1071684395239493633'
                  artist: 'https://twitter.com/intent/user?user_id=3129658207'
              - hash: e65f8bca8ec2322363fc13924875b7eb
                size: 1944x3505 PNG 4837.4KB
                thumbnail: /thumbnail/e/6/5/f/e65f8bca8ec2322363fc13924875b7eb.jpg
                title: ★2011★
                artist: alica@サンこそS38
                urls:
                  source: 'https://www.pixiv.net/artworks/15601359'
                  artist: 'https://www.pixiv.net/users/27915'
              - hash: e7dfac627d1c1cd354c661aa3d2ddcd0
                size: 1000x668 JPEG 455.1KB
                thumbnail: /thumbnail/e/7/d/f/e7dfac627d1c1cd354c661aa3d2ddcd0.jpg
                title: 2020.03.04
                artist: web_giga
                urls:
                  source: 'https://twitter.com/web_giga/status/1235138368956018689'
                  artist: 'https://twitter.com/intent/user?user_id=274318707'
        failed-bad-request:
          status: 400
          message: The parameters were not satisfied.
        failed-internal-error:
          status: 500
          message: Server bombed.
        failed-not-found:
          status: 200
          message: ok
          data:
            url: 'https://example.com'
            result: []
      properties:
        status:
          type: integer
          example: 200
          format: int32
          minimum: 100
          maximum: 999
          default: 200
        message:
          type: string
          minLength: 1
        data:
          type: object
          properties:
            url:
              type: string
              minLength: 1
            result:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  hash:
                    type: string
                    minLength: 1
                  size:
                    type: string
                    minLength: 1
                  thumbnail:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  artist:
                    type: string
                    minLength: 1
                  urls:
                    type: object
                    properties:
                      source:
                        type: string
                        minLength: 1
                      artist:
                        type: string
                        minLength: 1
                    required:
                      - source
                      - artist
                required:
                  - hash
                  - size
                  - thumbnail
                  - title
                  - artist
          required:
            - url
            - result
      required:
        - status
        - message
      title: PostSearchByImageAtAscii2dResponse
    PostGarbageCollectResponse:
      title: PostGarbageCollectResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
        failed:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetTagResponse:
      title: GetTagResponse
      type: object
      description: ''
      x-examples:
        success:
          status: 200
          message: ok
          data:
            id: 1
            user: 1
            type: 0
            name: 香風智乃
            description: かわいい女の子
            nsfw: false
        failed-not-found:
          status: 404
          message: Specifed tag was not found.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          $ref: '#/components/schemas/TagStruct'
      required:
        - status
        - message
    TagsStruct:
      title: TagsStruct
      type: object
      x-examples:
        example:
          tagName: 香風智乃
          tagDescription: かわいい女の子
          tagType: 1
          nsfw: false
      properties:
        tagName:
          type: string
        tagDescription:
          type: string
        tagType:
          type: integer
          description: 0~9
        nsfw:
          type: boolean
      required:
        - tagName
        - tagDescription
        - tagType
        - nsfw
    PutTagResponse:
      title: PutTagResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Updated
        failed-already-exists:
          status: 200
          message: The specifed name already exists.
        failed-bad-request:
          status: 400
          message: Bad request.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetFindTagsResponse:
      title: GetFindTagsResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            - id: 1
              name: 香風智乃
        failed-not-found:
          status: 200
          message: ok
          data: []
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          default: 200
          example: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: タグID
              name:
                type: string
                description: タグ名称
      required:
        - status
        - message
    PostTimelineGeneralRequest:
      title: PostTimelineGeneralRequest
      type: object
      properties:
        artistID:
          type: integer
          description: 絵師ID
      required:
        - artistID
    GetTimelineFollowingResponse:
      title: GetTimelineFollowingResponse
      type: object
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: 絵師ID
              name:
                type: string
                description: 絵師名
      required:
        - status
        - message
    PostTimelineFollowResponse:
      title: PostTimelineFollowResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Followed.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-conflict:
          status: 409
          message: You already followed the artist.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostTimelineUnfollowResponse:
      title: PostTimelineUnfollowResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Unfollowed.
        failed-bad-request:
          status: 400
          message: Bad request.
        failed-conflict:
          status: 409
          message: You already unfollowed the artist.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    PostWikiArticleRequest:
      title: PostWikiArticleRequest
      type: object
      properties:
        type:
          type: integer
          description: '対象の記事種別 0:ユーザー 1:タグ 2:絵師'
          enum:
            - 0
            - 1
            - 2
          example: 0
          default: 0
          minimum: 0
          maximum: 2
          format: int32
        id:
          type: integer
          description: 対象のユーザー/タグ/絵師ID
          minimum: 1
          format: int32
        title:
          type: string
          description: 記事タイトル
          minLength: 1
          maxLength: 50
        body:
          type: string
          description: 記事本文
          maxLength: 3000
          minLength: 1
      required:
        - type
        - id
        - title
        - body
      x-examples:
        example-1:
          type: 0
          id: 1
          title: お窓
          body: 作者・開発者。えらいひと。
    GetWikiArticleResponse:
      title: GetWikiArticleResponse
      type: object
      x-examples:
        success:
          status: 200
          message: ok
          data:
            type: 0
            id: 1
            title: お窓
            body: 管理者/開発者。すごい。
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
        data:
          type: object
          properties:
            type:
              type: integer
              description: '対象の記事種別 0:ユーザー 1:タグ 2:絵師'
              enum:
                - 0
                - 1
                - 2
              example: 0
              default: 0
              minimum: 0
              maximum: 2
              format: int32
            id:
              type: integer
              description: 対象のユーザー/タグ/絵師ID
              minimum: 1
              format: int32
            title:
              type: string
              description: 記事タイトル
              minLength: 1
              maxLength: 50
            body:
              type: string
              description: 記事本文
              maxLength: 3000
              minLength: 1
            createdDate:
              type: string
              description: 記事の作成日
            revision:
              type: integer
              description: 更新回数
      required:
        - status
        - message
    PutWikiArticleRequest:
      title: PutWikiArticleRequest
      type: object
      properties:
        title:
          type: string
          description: 記事タイトル
          minLength: 1
          maxLength: 50
        body:
          type: string
          description: 記事本文
          maxLength: 3000
          minLength: 1
    DeleteWikiArticleResponse:
      description: ''
      type: object
      x-examples:
        success:
          status: 200
          message: Deleted.
        failed-not-found:
          status: 404
          message: The article was not found.
        failed-permission:
          status: 400
          message: You don't have enough permission.
      title: DeleteWikiArticleResponse
      properties:
        status:
          type: integer
          example: 200
          default: 200
          minimum: 100
          maximum: 999
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    GetFindWikiArticleResponse:
      title: GetFindWikiArticleResponse
      type: object
      x-examples:
        success:
          status: 200
          message: Found.
        failed-not-found:
          status: 404
          message: Not found.
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 999
          example: 200
          default: 200
          format: int32
        message:
          type: string
          minLength: 1
      required:
        - status
        - message
    ActivityPubActorStruct:
      description: 'https://argrath.github.io/activitypub/#actor-objects'
      type: object
      x-examples:
        example-1:
          '@context':
            - 'https://www.w3.org/ns/activitystreams'
            - '@language': ja
          type: Person
          id: 'https://kenzoishii.example.com/'
          following: 'https://kenzoishii.example.com/following.json'
          followers: 'https://kenzoishii.example.com/followers.json'
          liked: 'https://kenzoishii.example.com/liked.json'
          inbox: 'https://kenzoishii.example.com/inbox.json'
          outbox: 'https://kenzoishii.example.com/feed.json'
          preferredUsername: kenzoishii
          name: 石井健蔵
          summary: この方はただの例です
          icon:
            - 'https://kenzoishii.example.com/image/165987aklre4'
      title: ActivityPubActorStruct
      properties:
        '@context':
          type: array
          items:
            type: object
            properties:
              '1':
                type: object
                properties:
                  '@language':
                    type: string
                    minLength: 1
                required:
                  - '@language'
        type:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        following:
          type: string
          minLength: 1
        followers:
          type: string
          minLength: 1
        liked:
          type: string
          minLength: 1
        inbox:
          type: string
          minLength: 1
        outbox:
          type: string
          minLength: 1
        preferredUsername:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        summary:
          type: string
          minLength: 1
        icon:
          type: array
          items:
            type: string
      required:
        - type
        - id
        - inbox
        - outbox
        - preferredUsername
        - name
        - summary
        - icon
    GetActivityPubGeneralResponse:
      description: ''
      type: object
      properties:
        '@context':
          type: string
          minLength: 1
        summary:
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        totalItems:
          type: number
        orderedItems:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - type
              - name
            properties:
              type:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
      required:
        - '@context'
        - summary
        - type
        - totalItems
        - orderedItems
      x-examples:
        example:
          '@context': 'https://www.w3.org/ns/activitystreams'
          summary: Sally's notes
          type: OrderedCollection
          totalItems: 2
          orderedItems:
            - type: Note
              name: A Simple Note
            - type: Note
              name: Another Simple Note
      title: GetActivityPubGeneralResponse
    PostActivityPubGeneralRequest:
      description: ''
      type: object
      properties:
        '@context':
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        summary:
          type: string
          minLength: 1
        actor:
          type: object
          properties:
            type:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
          required:
            - type
            - name
        object:
          type: object
          properties:
            type:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
          required:
            - type
            - name
      required:
        - '@context'
        - type
        - summary
        - actor
        - object
      x-examples:
        example-1:
          '@context': 'https://www.w3.org/ns/activitystreams'
          type: Activity
          summary: Sally did something to a note
          actor:
            type: Person
            name: Sally
          object:
            type: Note
            name: A Note
      title: PostActivityPubGeneralRequest
    GeneralMessageResponse:
      title: GeneralMessageResponse
      type: object
      properties:
        message:
          type: string
          description: 応答メッセージ(何が間違っているかの詳細)
          minLength: 1
      required:
        - message
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
  parameters:
    SearchQuerySort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        enum:
          - l
          - d
        example: d
        default: d
      description: 'ソート方法 l:いいね数順 d:投稿日順'
    SearchQueryOrder:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum:
          - d
          - a
        default: d
        example: d
        minLength: 1
        maxLength: 1
      description: 'ソート方向 d:降順(大→小) a:昇順(小→大)'
    SearchQueryPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
      description: 'ページ番号 (NOTE: 1ページ辺りの応答は20件)'
    SearchQueryMylistAllow:
      name: with_mylisted
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        enum:
          - 1
          - 0
        example: 1
        minimum: 0
        maximum: 1
      description: マイリスト追加済みかを取得する0/1 (デフォルト1)
    SearchQueryMylistDeny:
      name: with_mylisted
      in: query
      schema:
        type: integer
        enum:
          - 0
          - 1
        example: 0
        default: 0
        minimum: 0
        maximum: 1
      description: マイリスト追加済みかを取得する0/1 (デフォルト0)
  examples: {}
  responses: {}
security:
  - Authorization: []
tags:
  - name: accounts
  - name: activitypub
  - name: artists
  - name: arts
  - name: catalog
  - name: characters
  - name: garbage_collect
  - name: invites
  - name: mutes
  - name: mylist
  - name: navigations
  - name: news
  - name: notify
  - name: ranking
  - name: report
  - name: scrape
  - name: search
  - name: tags
  - name: timeline
  - name: upload
  - name: wiki
